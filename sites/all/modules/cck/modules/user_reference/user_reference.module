<?php
// $Id: user_reference.module,v 1.18 2009/05/16 16:44:32 yched Exp $

/**
 * @file
 * Defines a field type for referencing a user from a node.
 */

/**
 * Implementation of hook_menu().
 */
function user_reference_menu() {
  $items = array();
  $items['user_reference/autocomplete'] = array(
    'title' => 'user_reference autocomplete',
    'page callback' => 'user_reference_autocomplete',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK
  );
  return $items;
}

/**
 * Implementation of hook_theme().
 */
function user_reference_theme() {
  return array(
    'user_reference_select' => array(
      'arguments' => array('element' => NULL),
    ),
    'user_reference_buttons' => array(
      'arguments' => array('element' => NULL),
    ),
    'user_reference_autocomplete' => array(
      'arguments' => array('element' => NULL),
    ),
    'field_formatter_user_reference_default' => array(
      'arguments' => array('element'),
    ),
    'field_formatter_user_reference_plain' => array(
      'arguments' => array('element'),
    ),
  );
}

/**
 * Implementation of hook_field_info().
 */
function user_reference_field_info() {
  return array(
    'user_reference' => array(
      'label' => t('User reference'),
      'description' => t('This field stores the ID of a related user as an integer value.'),
      'settings' => array('referenceable_roles' => array(), 'referenceable_status' => array()),
      'default_widget' => 'user_reference_autocomplete',
      'default_formatter' => 'user_reference_default',
    ),
  );
}

/**
 * Implementation of hook_field_form().
 */
function user_reference_field_form($field) {
  $form = array();
  $form['referenceable_roles'] = array(
    '#type' => 'checkboxes',
    '#title' => t('User roles that can be referenced'),
    '#default_value' => isset($field['settings']['referenceable_roles']) && is_array($field['settings']['referenceable_roles']) ? array_filter($field['settings']['referenceable_roles']) : array(),
    '#options' => user_roles(1),
  );
  $form['referenceable_status'] = array(
    '#type' => 'checkboxes',
    '#title' => t('User status that can be referenced'),
    '#default_value' => isset($field['settings']['referenceable_status']) && is_array($field['settings']['referenceable_status']) ? array_filter($field['settings']['referenceable_status']) : array(1),
    '#options' => array(1 => t('Active'), 0 => t('Blocked')),
  );
  return $form;
}

/**
 * Implementation of hook_field_columns();
 */
function user_reference_field_columns($field) {
  $columns = array(
    'uid' => array('type' => 'int', 'unsigned' => TRUE,  'not null' => FALSE),
  );
  return $columns;
}

/**
 * Implementation of hook_field().
 */
function user_reference_field($op, $node, $field, &$items, $teaser, $page) {
  switch ($op) {
    case 'validate':
      // Extract uids to check.
      $ids = array();
      foreach ($items as $delta => $item) {
        if (is_array($item) && !empty($item['uid'])) {
          if (is_numeric($item['uid'])) {
            $ids[] = $item['uid'];
          }
          else {
            $error_element = isset($item['_error_element']) ? $item['_error_element'] : '';
            if (is_array($item) && isset($item['_error_element'])) unset($item['_error_element']);
            form_set_error($error_element, t('%name: invalid input.', array('%name' => t($field['widget']['label']))));
          }
        }
      }
      // Prevent performance hog if there are no ids to check.
      if ($ids) {
        $refs = _user_reference_potential_references($field, '', NULL, $ids);
        foreach ($items as $delta => $item) {
          if (is_array($item)) {
            $error_element = isset($item['_error_element']) ? $item['_error_element'] : '';
            if (is_array($item) && isset($item['_error_element'])) unset($item['_error_element']);
            if (!empty($item['uid']) && !isset($refs[$item['uid']])) {
              form_set_error($error_element, t('%name: invalid user.', array('%name' => t($field['widget']['label']))));
            }
          }
        }
      }
      return $items;
  }
}

/**
 * Implementation of hook_field_is_empty().
 */
function user_reference_field_is_empty($item, $field) {
  if (empty($item['uid'])) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implementation of hook_field_formatter_info().
 */
function user_reference_field_formatter_info() {
  return array(
    'user_reference_default' => array(
      'label' => t('Default'),
      'field types' => array('user_reference'),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_DEFAULT,
      ),
    ),
    'user_reference_plain' => array(
      'label' => t('Plain text'),
      'field types' => array('user_reference'),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_DEFAULT,
      ),
    ),
  );
}

/**
 * Theme function for 'default' user_reference field formatter.
 */
function theme_field_formatter_user_reference_default($element) {
  $output = '';
  if (isset($element['#item']['uid']) && $account = user_load($element['#item']['uid'])) {
    $output = theme('username', $account);
  }
  return $output;
}

/**
 * Theme function for 'plain' user_reference field formatter.
 */
function theme_field_formatter_user_reference_plain($element) {
  $output = '';
  if (isset($element['#item']['uid']) && $account = user_load(array('uid' => $element['#item']['uid']))) {
    $output = $account->name;
  }
  return $output;
}

/**
 * Implementation of hook_field_widget_info().
 *
 * We need custom handling of multiple values for the user_reference_select
 * widget because we need to combine them into a options list rather
 * than display multiple elements.
 *
 * We will use the field module's default handling for default value.
 *
 * Callbacks can be omitted if default handing is used.
 * They're included here just so this module can be used
 * as an example for custom modules that might do things
 * differently.
 */
function user_reference_field_widget_info() {
  return array(
    'user_reference_select' => array(
      'label' => t('Select list'),
      'field types' => array('user_reference'),
      'settings' => array(
         // TODO : should be an instance setting now
        'reverse_link' => 0
      ),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_CUSTOM,
        'default value' => FIELD_BEHAVIOR_DEFAULT,
      ),
    ),
    'user_reference_buttons' => array(
      'label' => t('Check boxes/radio buttons'),
      'field types' => array('user_reference'),
      'settings' => array(
         // TODO : should be an instance setting now
        'reverse_link' => 0
      ),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_CUSTOM,
        'default value' => FIELD_BEHAVIOR_DEFAULT,
      ),
    ),
    'user_reference_autocomplete' => array(
      'label' => t('Autocomplete text field'),
      'field types' => array('user_reference'),
      'settings' => array(
        'autocomplete_match' => 'contains',
        'size' => 60,
        // TODO : should be an instance setting now
        'reverse_link' => 0,
      ),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_DEFAULT,
        'default value' => FIELD_BEHAVIOR_DEFAULT,
      ),
    ),
  );
}

/**
 * Implementation of FAPI hook_elements().
 *
 * Any FAPI callbacks needed for individual widgets can be declared here,
 * and the element will be passed to those callbacks for processing.
 *
 * Drupal will automatically theme the element using a theme with
 * the same name as the hook_elements key.
 *
 * Autocomplete_path is not used by text_widget but other widgets can use it
 * (see nodereference and user_reference).
 */
function user_reference_elements() {
  return array(
    'user_reference_select' => array(
      '#input' => TRUE,
      '#columns' => array('uid'), '#delta' => 0,
      '#process' => array('user_reference_select_process'),
    ),
    'user_reference_buttons' => array(
      '#input' => TRUE,
      '#columns' => array('uid'), '#delta' => 0,
      '#process' => array('user_reference_buttons_process'),
    ),
    'user_reference_autocomplete' => array(
      '#input' => TRUE,
      '#columns' => array('name'), '#delta' => 0,
      '#process' => array('user_reference_autocomplete_process'),
      '#autocomplete_path' => FALSE,
      ),
    );
}

/**
 * Implementation of hook_field_widget_settings_form().
 */
function user_reference_field_widget_settings_form($instance) {
  $form = array();
  $widget = $instance['widget'];
  $defaults = field_info_widget_settings($widget['type']);
  $settings = array_merge($defaults, $widget['settings']);
  if ($widget['type'] == 'user_reference_autocomplete') {
    $form['autocomplete_match'] = array(
      '#type' => 'select',
      '#title' => t('Autocomplete matching'),
      '#default_value' => $settings['autocomplete_match'],
      '#options' => array(
        'starts_with' => t('Starts with'),
        'contains' => t('Contains'),
      ),
      '#description' => t('Select the method used to collect autocomplete suggestions. Note that <em>Contains</em> can cause performance issues on sites with thousands of users.'),
    );
    $form['size'] = array(
      '#type' => 'textfield',
      '#title' => t('Size of textfield'),
      '#default_value' => $size,
      '#element_validate' => array('_element_validate_integer_positive'),
      '#required' => TRUE,
    );
  }
  // TODO : should be an instance setting now.
  $form['reverse_link'] = array(
    '#type' => 'checkbox',
    '#title' => t('Reverse link'),
    '#default_value' => isset($widget['reverse_link']) ? $widget['reverse_link'] : 0,
    '#description' => t('If selected, a reverse link back to the referencing node will displayed on the referenced user record.'),
  );
 return $form;
}

/**
 * Implementation of hook_field_widget().
 *
 * Attach a single form element to the form. It will be built out and
 * validated in the callback(s) listed in hook_elements. We build it
 * out in the callbacks rather than here in hook_widget so it can be
 * plugged into any module that can provide it with valid
 * $field information.
 *
 * Field module will set the weight, field name and delta values
 * for each form element. This is a change from earlier CCK versions
 * where the widget managed its own multiple values.
 *
 * If there are multiple values for this field, the field module will
 * call this function as many times as needed.
 *
 * @param $form
 *   the entire form array, $form['#node'] holds node information
 * @param $form_state
 *   the form_state, $form_state['values'][$field['field_name']]
 *   holds the field's form values.
 * @param $field
 *   The field structure.
 * @param $instance
 *   the field instance array
 * @param $items
 *   array of default values for this field
 * @param $delta
 *   the order of this item in the array of subelements (0, 1, 2, etc)
 *
 * @return
 *   the form item for a single element for this field
 */
function user_reference_field_widget(&$form, &$form_state, $field, $instance, $items, $delta = 0) {
  switch ($instance['widget']['type']) {
    case 'user_reference_select':
      $element = array(
        '#type' => 'user_reference_select',
        '#default_value' => $items,
      );
      break;

    case 'user_reference_buttons':
      $element = array(
        '#type' => 'user_reference_buttons',
        '#default_value' => $items,
      );
      break;

    case 'user_reference_autocomplete':
      $element = array(
        '#type' => 'user_reference_autocomplete',
        '#default_value' => isset($items[$delta]) ? $items[$delta] : NULL,
        '#value_callback' => 'user_reference_autocomplete_value',
      );
      break;
  }
  return $element;
}

/**
 * Value for a user_reference autocomplete element.
 *
 * Substitute in the user name for the uid.
 */
function user_reference_autocomplete_value($element, $edit = FALSE) {
  $field_key  = $element['#columns'][0];
  if (!empty($element['#default_value'][$field_key])) {
    $value = db_result(db_query("SELECT name FROM {users} WHERE uid = '%d'", $element['#default_value'][$field_key]));
    return array($field_key => $value);
  }
  return array($field_key => NULL);
}

/**
 * Process an individual element.
 *
 * Build the form element. When creating a form using FAPI #process,
 * note that $element['#value'] is already set.
 *
 * The $field and $instance arrays are in $form['#fields'][$element['#field_name']].
 */
function user_reference_select_process($element, $edit, $form_state, $form) {
  // The user_reference_select widget doesn't need to create its own
  // element, it can wrap around the options_select element.
  // Add a validation step where the value can be unwrapped.
  $field_key  = $element['#columns'][0];
  $element[$field_key] = array(
    '#type' => 'options_select',
    '#default_value' => isset($element['#value']) ? $element['#value'] : '',
    // The following values were set by the field module and need
    // to be passed down to the nested element.
    '#title' => $element['#title'],
    '#required' => $element['#required'],
    '#description' => $element['#description'],
    '#field_name' => $element['#field_name'],
    '#bundle' => $element['#bundle'],
    '#delta' => $element['#delta'],
    '#columns' => $element['#columns'],
  );
  if (empty($element[$field_key]['#element_validate'])) {
    $element[$field_key]['#element_validate'] = array();
  }
  array_unshift($element[$field_key]['#element_validate'], 'user_reference_options_validate');
  return $element;
}

/**
 * Process an individual element.
 *
 * Build the form element. When creating a form using FAPI #process,
 * note that $element['#value'] is already set.
 *
 * The $field and $instance arrays are in $form['#fields'][$element['#field_name']].
 */
function user_reference_buttons_process($element, $edit, $form_state, $form) {
  // The user_reference_select widget doesn't need to create its own
  // element, it can wrap around the options_select element.
  // Add a validation step where the value can be unwrapped.
  $field_key  = $element['#columns'][0];
  $element[$field_key] = array(
    '#type' => 'options_buttons',
    '#default_value' => isset($element['#value']) ? $element['#value'] : '',
    // The following values were set by the field module and need
    // to be passed down to the nested element.
    '#title' => $element['#title'],
    '#required' => $element['#required'],
    '#description' => $element['#description'],
    '#field_name' => $element['#field_name'],
    '#bundle' => $element['#bundle'],
    '#delta' => $element['#delta'],
    '#columns' => $element['#columns'],
  );
  if (empty($element[$field_key]['#element_validate'])) {
    $element[$field_key]['#element_validate'] = array();
  }
  array_unshift($element[$field_key]['#element_validate'], 'user_reference_options_validate');
  return $element;
}

/**
 * Process an individual element.
 *
 * Build the form element. When creating a form using FAPI #process,
 * note that $element['#value'] is already set.
 *
 * The $field and $instance arrays are in $form['#fields'][$element['#field_name']].
 */
function user_reference_autocomplete_process($element, $edit, $form_state, $form) {
  // The user_reference autocomplete widget doesn't need to create its own
  // element, it can wrap around the text_textfield element and add an autocomplete
  // path and some extra processing to it.
  // Add a validation step where the value can be unwrapped.
  $field_key  = $element['#columns'][0];

  $element[$field_key] = array(
    '#type' => 'text_textfield',
    '#default_value' => isset($element['#value']) ? $element['#value'] : '',
    '#autocomplete_path' => 'user_reference/autocomplete/'. $element['#field_name'],
    // The following values were set by the field module and need
    // to be passed down to the nested element.
    '#title' => $element['#title'],
    '#required' => $element['#required'],
    '#description' => $element['#description'],
    '#field_name' => $element['#field_name'],
    '#bundle' => $element['#bundle'],
    '#delta' => $element['#delta'],
    '#columns' => $element['#columns'],
  );
  if (empty($element[$field_key]['#element_validate'])) {
    $element[$field_key]['#element_validate'] = array();
  }
  array_unshift($element[$field_key]['#element_validate'], 'user_reference_autocomplete_validate');

  // Used so that hook_field('validate') knows where to flag an error.
  $element['_error_element'] = array(
    '#type' => 'value',
    // Wrapping the element around a text_textfield element creates a
    // nested element, so the final id will look like 'field-name-0-uid-uid'.
    '#value' => implode('][', array_merge($element['#parents'], array($field_key, $field_key))),
  );
  return $element;
}

/**
 * Validate a select/buttons element.
 *
 * Remove the wrapper layer and set the right element's value.
 * We don't know exactly where this element is, so we drill down
 * through the element until we get to our key.
 *
 * We use $form_state['values'] instead of $element['#value']
 * to be sure we have the most accurate value when other modules
 * like options are using #element_validate to alter the value.
 */
function user_reference_options_validate($element, &$form_state) {
  $field_key  = $element['#columns'][0];

  $value = $form_state['values'];
  $new_parents = array();
  foreach ($element['#parents'] as $parent) {
    $value = $value[$parent];
    // Use === to be sure we get right results if parent is a zero (delta) value.
    if ($parent === $field_key) {
      $element['#parents'] = $new_parents;
      form_set_value($element, $value, $form_state);
      break;
    }
    $new_parents[] = $parent;
  }
}

/**
 * Validate an autocomplete element.
 *
 * Remove the wrapper layer and set the right element's value.
 * This will move the nested value at 'field-name-0-uid-uid'
 * back to its original location, 'field-name-0-uid'.
 */
function user_reference_autocomplete_validate($element, &$form_state) {
  $field_name = $element['#field_name'];
  $bundle = $element['#bundle'];
  $field = field_fields($field_name, $bundle);
  $field_key = $element['#columns'][0];
  $value = $element['#value'][$field_key];
  $uid = NULL;
  if (!empty($value)) {
    $reference = _user_reference_potential_references($field, $value, 'equals', NULL, 1);
    if (empty($reference)) {
      form_error($element[$field_key], t('%name: found no valid user with that name.', array('%name' => t($field['widget']['label']))));
    }
    else {
      $uid = key($reference);
    }
  }
  form_set_value($element, $uid, $form_state);
}

/**
 * Implementation of hook_allowed_values().
 */
function user_reference_allowed_values($field) {
  $references = _user_reference_potential_references($field);

  $options = array();
  foreach ($references as $key => $value) {
    $options[$key] = $value['rendered'];
  }
  return $options;
}

/**
 * Fetch an array of all candidate referenced users.
 *
 * This info is used in various places (aloowed values, autocomplete results,
 * input validation...). Some of them only need the uids, others nid + names,
 * others yet uid + names + rendered row (for display in widgets).
 * The array we return contains all the potentially needed information, and lets
 * consumers use the parts they actually need.
 *
 * @param $field
 *   The field description.
 * @param $string
 *   Optional string to filter usernames on (used by autocomplete)
 * @param $match
 *   Operator to match filtered name against, can be any of:
 *   'contains', 'equals', 'starts_with'
 * @param $ids
 *   Optional user ids to lookup (the $string and $match arguments will be
 *   ignored).
 * @param $limit
 *   If non-zero, limit the size of the result set.
 *
 * @return
 *   An array of valid users in the form:
 *   array(
 *     uid => array(
 *       'title' => The user name,
 *       'rendered' => The text to display in widgets (can be HTML)
 *     ),
 *     ...
 *   )
 */
function _user_reference_potential_references($field, $string = '', $match = 'contains', $ids = array(), $limit = NULL) {
  static $results = array();

  // Create unique id for static cache.
  $cid = $field['field_name'] .':'. $match .':'. ($string !== '' ? $string : implode('-', $ids)) .':'. $limit;
  if (!isset($results[$cid])) {
    $references = FALSE;
    // TODO : reintegrate Views mode ?
    if ($references === FALSE) {
      $references = _user_reference_potential_references_standard($field, $string, $match, $ids, $limit);
    }

    // Store the results.
    $results[$cid] = !empty($references) ? $references : array();
  }

  return $results[$cid];
}

/**
 * Helper function for _user_reference_potential_references():
 * referenceable users defined by user role and status
 */
function _user_reference_potential_references_standard($field, $string = '', $match = 'contains', $ids = array(), $limit = NULL) {
  $where = array();
  $args = array();
  $join = array();

  if ($string !== '') {
    $match_operators = array(
      'contains' => "LIKE '%%%s%%'",
      'equals' => "= '%s'",
      'starts_with' => "LIKE '%s%%'",
    );
    $where[] = 'u.name '. (isset($match_operators[$match]) ? $match_operators[$match] : $match_operators['contains']);
    $args[] = $string;
  }
  elseif ($ids) {
    $where[] = 'u.uid IN (' . db_placeholders($ids) . ')';
    $args = array_merge($args, $ids);
  }
  else {
    $where[] = "u.uid > 0";
  }

  $roles = array();
  if (isset($field['settings']['referenceable_roles']) && is_array($field['settings']['referenceable_roles'])) {
    // keep only selected checkboxes
    $roles = array_filter($field['settings']['referenceable_roles']);
    // filter invalid values that seems to get through sometimes ??
    $roles = array_intersect(array_keys(user_roles(1)), $roles);
  }
  if (!empty($roles) && !in_array(DRUPAL_AUTHENTICATED_RID, $roles)) {
    $where[] = "r.rid IN (". implode($roles, ',') .")";
    $join[] = 'LEFT JOIN {users_roles} r ON u.uid = r.uid';
  }

  $status = array();
  if (isset($field['settings']['referenceable_status']) && is_array($field['settings']['referenceable_status'])) {
    // keep only selected checkboxes
    $status = array_filter($field['settings']['referenceable_status']);
  }
  if (!empty($status)) {
    // Limit query if only one status should be referenced.
    if (count($status) == 1) {
      $where[] = "u.status = ". array_pop($status);
    }
  }

  $users = array();
  $where_clause = $where ? 'WHERE ('. implode(') AND (', $where) .')' : '';
  $result = db_query('SELECT u.name, u.uid FROM {users} u '. implode(' ', $join) ." $where_clause ORDER BY u.name ASC", $args);
  while ($user = db_fetch_object($result)) {
    $users[$user->uid] = array(
      'title' => $user->name,
      'rendered' => check_plain($user->name),
    );
  }
  return $users;
}

/**
 * Menu callback; Retrieve a pipe delimited string of autocomplete suggestions for existing users
 */
function user_reference_autocomplete($field_name, $string = '') {
  $fields = field_info_fields();
  $field = $fields[$field_name];
  $match = isset($field['widget']['autocomplete_match']) ? $field['widget']['autocomplete_match'] : 'contains';
  $matches = array();

  $references = _user_reference_potential_references($field, $string, $match, array(), 10);
  foreach ($references as $id => $row) {
    // Add a class wrapper for a few required CSS overrides.
    $matches[$row['title']] = '<div class="reference-autocomplete">'. $row['rendered'] . '</div>';
  }
  drupal_json($matches);
}

/**
 * Implementation of hook_user_load().
 */
function user_reference_user_load(&$accounts) {

  // Only add links if we are on the user 'view' page.
  if (arg(0) != 'user' || arg(2)) {
    return;
  }

  foreach ($accounts as $uid => $account) {

    // find CCK user_reference field tables
    // search through them for matching user ids and load those nodes
    $additions = array();
    $fields = field_info_instances('user');

    // TODO : replace with field_attach_query() + synchronize with latest D6 code.

    // Find the table and columns to search through, if the same
    // table comes up in more than one field type, we only need
    // to search it once.
    $search_tables = array();
    $search_links = array();
    foreach ($fields as $field) {
      if ($field['type'] == 'user_reference' && !empty($field['widget']['reverse_link'])) {
        $db_info = content_database_info($field);
        $search_tables[$db_info['table']] = $db_info['columns']['uid']['column'];
        $search_links[$db_info['table']] = $field['widget']['reverse_link'];
      }
    }
    foreach ($search_tables as $table => $column) {
      $ids = db_query(db_rewrite_sql("SELECT DISTINCT(n.nid) FROM {node} n LEFT JOIN {". $table ."} f ON n.vid = f.vid WHERE f.". $column ."=". $account->uid. " AND n.status = 1"));
      while ($data = db_fetch_object($ids)) {
        // TODO, do we really want a complete node_load() here? We only need the title to create a link.
        $node = node_load($data->nid);
        $node->reverse_link = $search_links[$table];
        $additions[$node->type][] = $node;
      }
    }
    $accounts[$uid]->user_reference = $additions;
  }
  return;
}

/**
 * Implementation of hook_user_view().
 */
function user_reference_user_view(&$account) {
  if (!empty($account->user_reference)) {
    $node_types = content_types();
    $additions = array();
    $values = array();
    foreach ($account->user_reference as $node_type => $nodes) {
      foreach ($nodes as $node) {
        if ($node->reverse_link) {
          $values[$node_type][] = l($node->title, 'node/'. $node->nid);
        }
      }
      if (isset($values[$node_type])) {
        $additions[] = array(
          '#type' => 'user_profile_item',
          '#title' => check_plain($node_types[$node_type]['name']),
          '#value' => theme('item_list', $values[$node_type]),
        );
      }
    }
    if ($additions) {
      $account->content['user_reference'] = $additions + array(
        '#type' => 'user_profile_category',
        '#attributes' => array('class' => 'user-member'),
        '#title' => t('Related content'),
        '#weight' => 10,
      );
    }
  }
}

/**
 * FAPI theme for an individual elements.
 *
 * The textfield or select is already rendered by the
 * textfield or select themes and the html output
 * lives in $element['#children']. Override this theme to
 * make custom changes to the output.
 *
 * $element['#field_name'] contains the field name
 * $element['#delta]  is the position of this element in the group
 */
function theme_user_reference_select($element) {
  return $element['#children'];
}

function theme_user_reference_buttons($element) {
  return $element['#children'];
}

function theme_user_reference_autocomplete($element) {
  return $element['#children'];
}

/**
 * Implementation of hook_field_settings_form().
 */
function user_reference_field_settings_form($field) {
  $form = array();
  $form['referenceable_roles'] = array(
    '#type' => 'checkboxes',
    '#title' => t('User roles that can be referenced'),
    '#default_value' => isset($field['settings']['referenceable_roles']) && is_array($field['settings']['referenceable_roles']) ? array_filter($field['settings']['referenceable_roles']) : array(),
    '#options' => user_roles(1),
  );
  $form['referenceable_status'] = array(
    '#type' => 'checkboxes',
    '#title' => t('User status that can be referenced'),
    '#default_value' => isset($field['settings']['referenceable_status']) && is_array($field['settings']['referenceable_status']) ? array_filter($field['settings']['referenceable_status']) : array(1),
    '#options' => array(1 => t('Active'), 0 => t('Blocked')),
  );
  return $form;
}
