<?php
// $Id: poll.module,v 1.289 2009/02/18 14:28:22 webchick Exp $

/**
 * @file
 * Enables your site to capture votes on different topics in the form of multiple
 * choice questions.
 */

/**
 * Implementation of hook_help().
 */
function poll_help($path, $arg) {
  switch ($path) {
    case 'admin/help#poll':
      $output = '<p>' . t('The poll module can be used to create simple polls for site users. A poll is a simple, multiple choice questionnaire which displays the cumulative results of the answers to the poll. Having polls on the site is a good way to receive feedback from community members.') . '</p>';
      $output .= '<p>' . t('When creating a poll, enter the question being posed, as well as the potential choices (and beginning vote counts for each choice). The status and duration (length of time the poll remains active for new votes) can also be specified. Use the <a href="@poll">poll</a> menu item to view all current polls. To vote in or view the results of a specific poll, click on the poll itself.', array('@poll' => url('poll'))) . '</p>';
      $output .= '<p>' . t('For more information, see the online handbook entry for <a href="@poll">Poll module</a>.', array('@poll' => 'http://drupal.org/handbook/modules/poll/')) . '</p>';
      return $output;
  }
}

/**
 * Implementation of hook_init().
 */
function poll_init() {
  drupal_add_css(drupal_get_path('module', 'poll') . '/poll.css');
}

/**
 * Implementation of hook_theme().
 */
function poll_theme() {
  return array(
    'poll_vote' => array(
      'template' => 'poll-vote',
      'arguments' => array('form' => NULL),
    ),
    'poll_choices' => array(
      'arguments' => array('form' => NULL),
    ),
    'poll_results' => array(
      'template' => 'poll-results',
      'arguments' => array('raw_title' => NULL, 'results' => NULL, 'votes' => NULL, 'raw_links' => NULL, 'block' => NULL, 'nid' => NULL, 'vote' => NULL),
    ),
    'poll_bar' => array(
      'template' => 'poll-bar',
      'arguments' => array('title' => NULL, 'votes' => NULL, 'total_votes' => NULL, 'vote' => NULL, 'block' => NULL),
    ),
  );
}

/**
 * Implementation of hook_perm().
 */
function poll_perm() {
  $perms = node_list_permissions('poll');
  $perms += array(
    'vote on polls' => array(
      'title' => t('Vote on polls'),
      'description' => t('Cast votes on polls.'),
    ),
    'cancel own vote' => array(
      'title' => t('Cancel own vote'),
      'description' => t('Retract and optionally change own votes.'),
    ),
    'inspect all votes' => array(
      'title' => t('Inspect all votes'),
      'description' => t('View voting results.'),
    ),
  );

  return $perms;
}

/**
 * Implementation of hook_access().
 */
function poll_access($op, $node, $account) {
  switch ($op) {
    case 'create':
      return user_access('create poll content', $account);
    case 'update':
      return user_access('edit any poll content', $account) || (user_access('edit own poll content', $account) && ($node->uid == $account->uid));
    case 'delete':
      return user_access('delete any poll content', $account) || (user_access('delete own poll content', $account) && ($node->uid == $account->uid));
  }
}

/**
 * Implementation of hook_menu().
 */
function poll_menu() {
  $items['poll'] = array(
    'title' => 'Polls',
    'page callback' => 'poll_page',
    'access arguments' => array('access content'),
    'type' => MENU_SUGGESTED_ITEM,
  );

  $items['node/%node/votes'] = array(
    'title' => 'Votes',
    'page callback' => 'poll_votes',
    'page arguments' => array(1),
    'access callback' => '_poll_menu_access',
    'access arguments' => array(1, 'inspect all votes', FALSE),
    'weight' => 3,
    'type' => MENU_LOCAL_TASK,
  );

  $items['node/%node/results'] = array(
    'title' => 'Results',
    'page callback' => 'poll_results',
    'page arguments' => array(1),
    'access callback' => '_poll_menu_access',
    'access arguments' => array(1, 'access content', TRUE),
    'weight' => 3,
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Callback function to see if a node is acceptable for poll menu items.
 */
function _poll_menu_access($node, $perm, $inspect_allowvotes) {
  return user_access($perm) && ($node->type == 'poll') && ($node->allowvotes || !$inspect_allowvotes);
}

/**
 * Implementation of hook_block_list().
 */
function poll_block_list() {
  if (user_access('access content')) {
    $blocks['recent']['info'] = t('Most recent poll');
    return $blocks;
  }
}

/**
 * Implementation of hook_block_view().
 *
 * Generates a block containing the latest poll.
 */
function poll_block_view($delta = '') {
  if (user_access('access content')) {
    // Retrieve the latest poll.
    $record = db_query_range(db_rewrite_sql("SELECT n.nid FROM {node} n INNER JOIN {poll} p ON p.nid = n.nid WHERE n.status = :status AND p.active = :active ORDER BY n.created DESC"), array(':status' => 1, ':active' => 1), 0, 1)->fetch();
    if ($record) {
      $poll = node_load($record->nid);
      if ($poll->nid) {
        $poll = poll_view($poll, TRUE, FALSE, TRUE);
      }
    }
    $block['subject'] = t('Poll');
    $block['content'] = drupal_render($poll->content);
    return $block;
  }
}

/**
 * Implementation of hook_cron().
 *
 * Closes polls that have exceeded their allowed runtime.
 */
function poll_cron() {
  $result = db_query('SELECT p.nid FROM {poll} p INNER JOIN {node} n ON p.nid = n.nid WHERE (n.created + p.runtime) < ' . REQUEST_TIME . ' AND p.active = 1 AND p.runtime != 0');
  while ($poll = db_fetch_object($result)) {
    db_query("UPDATE {poll} SET active = 0 WHERE nid = %d", $poll->nid);
  }
}

/**
 * Implementation of hook_node_info().
 */
function poll_node_info() {
  return array(
    'poll' => array(
      'name' => t('Poll'),
      'base' => 'poll',
      'description' => t('A <em>poll</em> is a question with a set of possible responses. A <em>poll</em>, once created, automatically provides a simple running count of the number of votes received for each response.'),
      'title_label' => t('Question'),
      'has_body' => FALSE,
    )
  );
}

/**
 * Implementation of hook_form().
 */
function poll_form(&$node, $form_state) {
  global $user;

  $admin = user_access('administer nodes') || user_access('edit any poll content') || (user_access('edit own poll content') && $user->uid == $node->uid);

  $type = node_get_types('type', $node);

  $form = array(
    '#cache' => TRUE,
  );

  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => check_plain($type->title_label),
    '#required' => TRUE,
    '#default_value' => $node->title,
    '#weight' => -5,
  );

  if (isset($form_state['choice_count'])) {
    $choice_count = $form_state['choice_count'];
  }
  else {
    $choice_count = max(2, empty($node->choice) ? 2 : count($node->choice));
  }

  // Add a wrapper for the choices and more button.
  $form['choice_wrapper'] = array(
    '#tree' => FALSE,
    '#weight' => -4,
    '#prefix' => '<div class="clearfix" id="poll-choice-wrapper">',
    '#suffix' => '</div>',
  );

  // Container for just the poll choices.
  $form['choice_wrapper']['choice'] = array(
    '#prefix' => '<div id="poll-choices">',
    '#suffix' => '</div>',
    '#theme' => 'poll_choices',
  );

  // Add the current choices to the form.
  $delta = 0;
  $weight = 0;
  if (isset($node->choice)) {
    $delta = count($node->choice);
    $weight = -$delta;
    foreach ($node->choice as $chid => $choice) {
      $key = 'chid:'. $chid;
      $form['choice_wrapper']['choice'][$key] = _poll_choice_form($key, $choice['chid'], $choice['chtext'], $choice['chvotes'], $choice['weight'], $choice_count);
      $weight = ($choice['weight'] > $weight) ? $choice['weight'] : $weight;
    }
  }

  // Add initial or additional choices.
  $existing_delta = $delta;
  for ($delta; $delta < $choice_count; $delta++) {
    $key = 'new:'. ($delta - $existing_delta);
    $form['choice_wrapper']['choice'][$key] = _poll_choice_form($key, NULL, '', 0, $weight, $choice_count);
  }

  // We name our button 'poll_more' to avoid conflicts with other modules using
  // AHAH-enabled buttons with the id 'more'.
  $form['choice_wrapper']['poll_more'] = array(
    '#type' => 'submit',
    '#value' => t('More choices'),
    '#description' => t("If the amount of boxes above isn't enough, click here to add more choices."),
    '#weight' => 1,
    '#submit' => array('poll_more_choices_submit'), // If no javascript action.
    '#ahah' => array(
      'callback' => 'poll_choice_js',
      'wrapper' => 'poll-choices',
      'method' => 'replace',
      'effect' => 'fade',
    ),
  );

  // Poll attributes
  $duration = array(0 => t('Unlimited')) + drupal_map_assoc(array(86400, 172800, 345600, 604800, 1209600, 2419200, 4838400, 9676800, 31536000), "format_interval");
  $active = array(0 => t('Closed'), 1 => t('Active'));

  $form['settings'] = array(
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#title' => t('Poll settings'),
    '#weight' => -3,
    '#access' => $admin,
  );

  $form['settings']['active'] = array(
    '#type' => 'radios',
    '#title' => t('Poll status'),
    '#default_value' => isset($node->active) ? $node->active : 1,
    '#options' => $active,
    '#description' => t('When a poll is closed, visitors can no longer vote for it.'),
    '#access' => $admin,
  );
  $form['settings']['runtime'] = array(
    '#type' => 'select',
    '#title' => t('Poll duration'),
    '#default_value' => isset($node->runtime) ? $node->runtime : 0,
    '#options' => $duration,
    '#description' => t('After this period, the poll will be closed automatically.'),
  );

  return $form;
}

/**
 * Submit handler to add more choices to a poll form. This handler is used when
 * javascript is not available. It makes changes to the form state and the
 * entire form is rebuilt during the page reload.
 */
function poll_more_choices_submit($form, &$form_state) {
  // Set the form to rebuild and run submit handlers.
  node_form_submit_build_node($form, $form_state);

  // Make the changes we want to the form state.
  if ($form_state['values']['poll_more']) {
    $n = $_GET['q'] == 'system/ahah' ? 1 : 5;
    $form_state['choice_count'] = count($form_state['values']['choice']) + $n;
  }
}

function _poll_choice_form($key, $chid = NULL, $value = '', $votes = 0, $weight = 0, $size = 10) {
  $admin = user_access('administer nodes');

  $form = array(
    '#tree' => TRUE,
  );

  // We'll manually set the #parents property of these fields so that
  // their values appear in the $form_state['values']['choice'] array.
  $form['chid'] = array(
    '#type' => 'value',
    '#value' => $chid,
    '#parents' => array('choice', $key, 'chid'),
  );

  $form['chtext'] = array(
    '#type' => 'textfield',
    '#default_value' => $value,
    '#parents' => array('choice', $key, 'chtext'),
  );

  $form['chvotes'] = array(
    '#type' => 'textfield',
    '#default_value' => $votes,
    '#size' => 5,
    '#maxlength' => 7,
    '#parents' => array('choice', $key, 'chvotes'),
    '#access' => user_access('administer nodes'),
  );

  $form['weight'] = array(
    '#type' => 'weight',
    '#default_value' => $weight,
    '#delta' => $size,
    '#parents' => array('choice', $key, 'weight'),
  );

  return $form;
}

/**
 * Menu callback for AHAH additions. Render the new poll choices.
 */
function poll_choice_js($form, $form_state) {
  $choice_form = $form['choice_wrapper']['choice'];

  // Prevent duplicate wrappers.
  unset($choice_form['#prefix'], $choice_form['#suffix']);
  $output = theme('status_messages') . drupal_render($choice_form);

  drupal_json(array('status' => TRUE, 'data' => $output));
}

/**
 * Implementation of hook_submit().
 */
function poll_node_form_submit(&$form, &$form_state) {
  // Renumber fields
  $form_state['values']['choice'] = array_values($form_state['values']['choice']);
  $form_state['values']['teaser'] = poll_teaser((object)$form_state['values']);
}

/**
 * Implementation of hook_validate().
 */
function poll_validate($node, $form) {
  if (isset($node->title)) {
    // Check for at least two options and validate amount of votes:
    $realchoices = 0;
    // Renumber fields
    $node->choice = array_values($node->choice);
    foreach ($node->choice as $i => $choice) {
      if ($choice['chtext'] != '') {
        $realchoices++;
      }
      if (isset($choice['chvotes']) && $choice['chvotes'] < 0) {
        form_set_error("choice][$i][chvotes", t('Negative values are not allowed.'));
      }
    }

    if ($realchoices < 2) {
      form_set_error("choice][$realchoices][chtext", t('You must fill in at least two choices.'));
    }
  }
}

/**
 * Implementation of hook_load().
 */
function poll_load($nodes) {
  global $user;
  foreach ($nodes as $node) {
    $poll = db_query("SELECT runtime, active FROM {poll} WHERE nid = :nid", array(':nid' => $node->nid))->fetch();

    // Load the appropriate choices into the $poll object.
    $poll->choice = db_query("SELECT chid, chtext, chvotes, weight FROM {poll_choice} WHERE nid = :nid ORDER BY weight", array(':nid' => $node->nid))->fetchAllAssoc('chid', PDO::FETCH_ASSOC);

    // Determine whether or not this user is allowed to vote.
    $poll->allowvotes = FALSE;
    if (user_access('vote on polls') && $poll->active) {
      if ($user->uid) {
        $result = db_query('SELECT chid FROM {poll_vote} WHERE nid = :nid AND uid = :uid', array(':nid' => $node->nid, ':uid' => $user->uid))->fetch();
      }
      else {
        $result = db_query("SELECT chid FROM {poll_vote} WHERE nid = :nid AND hostname = :hostname", array(':nid' => $node->nid, ':hostname' => ip_address()))->fetch();
      }
      if ($result) {
        $poll->vote = $result->chid;
      }
      else {
        $poll->vote = -1;
        $poll->allowvotes = TRUE;
      }
    }
    foreach ($poll as $key => $value) {
      $nodes[$node->nid]->$key = $value;
    }
  }
}

/**
 * Implementation of hook_insert().
 */
function poll_insert($node) {
  if (!user_access('administer nodes')) {
    // Make sure all votes are 0 initially
    foreach ($node->choice as $i => $choice) {
      $node->choice[$i]['chvotes'] = 0;
    }
    $node->active = 1;
  }

  db_query("INSERT INTO {poll} (nid, runtime, active) VALUES (%d, %d, %d)", $node->nid, $node->runtime, $node->active);

  foreach ($node->choice as $choice) {
    if ($choice['chtext'] != '') {
      db_query("INSERT INTO {poll_choice} (nid, chtext, chvotes, weight) VALUES (%d, '%s', %d, %d)", $node->nid, $choice['chtext'], $choice['chvotes'], $choice['weight']);
    }
  }
}

/**
 * Implementation of hook_update().
 */
function poll_update($node) {
  // Update poll settings.
  db_query('UPDATE {poll} SET runtime = %d, active = %d WHERE nid = %d', $node->runtime, $node->active, $node->nid);

  // Poll choices with empty titles signifies removal. We remove all votes to
  // the removed options, so people who voted on them can vote again.
  foreach ($node->choice as $key => $choice) {
    if (!empty($choice['chtext'])) {
      if (isset($choice['chid'])) {
        db_query("UPDATE {poll_choice} SET chtext = '%s', chvotes = %d, weight = %d WHERE chid = %d", $choice['chtext'], (int)$choice['chvotes'], $choice['weight'], $choice['chid']);
      }
      else {
        db_query("INSERT INTO {poll_choice} (nid, chtext, chvotes, weight) VALUES (%d, '%s', %d, %d)", $node->nid, $choice['chtext'], (int)$choice['chvotes'], $choice['weight']);
      }
    }
    else {
      db_query("DELETE FROM {poll_vote} WHERE nid = %d AND chid = %d", $node->nid, $key);
    }
  }
}

/**
 * Implementation of hook_delete().
 */
function poll_delete($node) {
  db_query("DELETE FROM {poll} WHERE nid = %d", $node->nid);
  db_query("DELETE FROM {poll_choice} WHERE nid = %d", $node->nid);
  db_query("DELETE FROM {poll_vote} WHERE nid = %d", $node->nid);
}

/**
 * Implementation of hook_view().
 *
 * @param $block
 *   An extra parameter that adapts the hook to display a block-ready
 *   rendering of the poll.
 */
function poll_view($node, $teaser = FALSE, $block = FALSE) {
  global $user;
  $output = '';

  // Special display for side-block
  if ($block) {
    // No 'read more' link
    $node->readmore = FALSE;

    $links = module_invoke_all('link', 'node', $node, 1);
    $links[] = array('title' => t('Older polls'), 'href' => 'poll', 'attributes' => array('title' => t('View the list of polls on this site.')));
    if ($node->allowvotes && $block) {
      $links[] = array('title' => t('Results'), 'href' => 'node/' . $node->nid . '/results', 'attributes' => array('title' => t('View the current poll results.')));
    }

    $node->links = $links;
  }

  if (!empty($node->allowvotes) && ($block || empty($node->show_results))) {
    $node->content['body'] = array(
      '#markup' => drupal_get_form('poll_view_voting', $node, $block),
    );
  }
  else {
    $node->content['body'] = array(
      '#markup' => poll_view_results($node, $teaser, $block),
    );
  }
  return $node;
}

/**
 * Creates a simple teaser that lists all the choices.
 *
 * This is primarily used for RSS.
 */
function poll_teaser($node) {
  $teaser = NULL;
  if (is_array($node->choice)) {
    foreach ($node->choice as $k => $choice) {
      if ($choice['chtext'] != '') {
        $teaser .= '* ' . check_plain($choice['chtext']) . "\n";
      }
    }
  }
  return $teaser;
}

/**
 * Generates the voting form for a poll.
 *
 * @ingroup forms
 * @see poll_vote()
 * @see phptemplate_preprocess_poll_vote()
 */
function poll_view_voting(&$form_state, $node, $block) {
  if ($node->choice) {
    $list = array();
    foreach ($node->choice as $i => $choice) {
      $list[$i] = check_plain($choice['chtext']);
    }
    $form['choice'] = array(
      '#type' => 'radios',
      '#default_value' => -1,
      '#options' => $list,
    );
  }

  $form['vote'] = array(
    '#type' => 'submit',
    '#value' => t('Vote'),
    '#submit' => array('poll_vote'),
  );

  // Store the node so we can get to it in submit functions.
  $form['#node'] = $node;
  $form['#block'] = $block;

  // Set form caching because we could have multiple of these forms on
  // the same page, and we want to ensure the right one gets picked.
  $form['#cache'] = TRUE;

  // Provide a more cleanly named voting form theme.
  $form['#theme'] = 'poll_vote';
  return $form;
}

/**
 * Validation function for processing votes
 */
function poll_view_voting_validate($form, &$form_state) {
  if ($form_state['values']['choice'] == -1) {
    form_set_error( 'choice', t('Your vote could not be recorded because you did not select any of the choices.'));
  }
}

/**
 * Submit handler for processing a vote
 */
function poll_vote($form, &$form_state) {
  $node = $form['#node'];
  $choice = $form_state['values']['choice'];

  global $user;
  if ($user->uid) {
    db_query('INSERT INTO {poll_vote} (nid, chid, uid, timestamp) VALUES (%d, %d, %d, %d)', $node->nid, $choice, $user->uid, REQUEST_TIME);
  }
  else {
    db_query("INSERT INTO {poll_vote} (nid, chid, hostname, timestamp) VALUES (%d, %d, '%s', %d)", $node->nid, $choice, ip_address(), REQUEST_TIME);
  }

  // Add one to the votes.
  db_query("UPDATE {poll_choice} SET chvotes = chvotes + 1 WHERE chid = %d", $choice);

  cache_clear_all();
  drupal_set_message(t('Your vote was recorded.'));

  // Return the user to whatever page they voted from.
}

/**
 * Themes the voting form for a poll.
 *
 * Inputs: $form
 */
function template_preprocess_poll_vote(&$variables) {
  $form = $variables['form'];
  $variables['choice'] = drupal_render($form['choice']);
  $variables['title'] = check_plain($form['#node']->title);
  $variables['vote'] = drupal_render($form['vote']);
  $variables['rest'] = drupal_render_children($form);
  $variables['block'] = $form['#block'];
  // If this is a block, allow a different tpl.php to be used.
  if ($variables['block']) {
    $variables['template_files'][] = 'poll-vote-block';
  }
}

/**
 * Generates a graphical representation of the results of a poll.
 */
function poll_view_results(&$node, $teaser, $block) {
  // Count the votes and find the maximum
  $total_votes = 0;
  $max_votes = 0;
  foreach ($node->choice as $choice) {
    if (isset($choice['chvotes'])) {
      $total_votes += $choice['chvotes'];
      $max_votes = max($max_votes, $choice['chvotes']);
    }
  }

  $poll_results = '';
  foreach ($node->choice as $i => $choice) {
    if (!empty($choice['chtext'])) {
      $chvotes = isset($choice['chvotes']) ? $choice['chvotes'] : NULL;
      $poll_results .= theme('poll_bar', $choice['chtext'], $chvotes, $total_votes, isset($node->vote) && $node->vote == $i, $block);
    }
  }

  return theme('poll_results', $node->title, $poll_results, $total_votes, isset($node->links) ? $node->links : array(), $block, $node->nid, isset($node->vote) ? $node->vote : NULL);
}


/**
 * Theme the admin poll form for choices.
 *
 * @ingroup themeable
 */
function theme_poll_choices($form) {
  drupal_add_tabledrag('poll-choice-table', 'order', 'sibling', 'poll-weight');

  $delta = 0;
  $rows = array();
  $headers = array(
    '',
    t('Choice'),
    t('Vote count'),
    t('Weight'),
  );

  foreach (element_children($form) as $key) {
    $delta++;
    // Set special classes for drag and drop updating.
    $form[$key]['weight']['#attributes']['class'] = 'poll-weight';

    // Build the table row.
    $row = array(
      'data' => array(
        array('class' => 'choice-flag'),
        drupal_render($form[$key]['chtext']),
        drupal_render($form[$key]['chvotes']),
        drupal_render($form[$key]['weight']),
      ),
      'class' => 'draggable',
    );

    // Add any additional classes set on the row.
    $row['class'] .= isset($form[$key]['#attributes']['class']) ? ' '. $form[$key]['#attributes']['class'] : '';

    $rows[] = $row;
  }

  $output = theme('table', $headers, $rows, array('id' => 'poll-choice-table'));
  $output .= drupal_render_children($form);
  return $output;
}

/**
 * Preprocess the poll_results theme hook.
 *
 * Inputs: $raw_title, $results, $votes, $raw_links, $block, $nid, $vote. The
 * $raw_* inputs to this are naturally unsafe; often safe versions are
 * made to simply overwrite the raw version, but in this case it seems likely
 * that the title and the links may be overridden by the theme layer, so they
 * are left in with a different name for that purpose.
 *
 * @see poll-results.tpl.php
 * @see poll-results-block.tpl.php
 * @see theme_poll_results()
 */
function template_preprocess_poll_results(&$variables) {
  $variables['links'] = theme('links', $variables['raw_links']);
  if (isset($variables['vote']) && $variables['vote'] > -1 && user_access('cancel own vote')) {
    $variables['cancel_form'] = drupal_get_form('poll_cancel_form', $variables['nid']);
  }
  $variables['title'] = check_plain($variables['raw_title']);

  // If this is a block, allow a different tpl.php to be used.
  if ($variables['block']) {
    $variables['template_files'][] = 'poll-results-block';
  }
}

/**
 * Preprocess the poll_bar theme hook.
 *
 * Inputs: $title, $votes, $total_votes, $voted, $block
 *
 * @see poll-bar.tpl.php
 * @see poll-bar-block.tpl.php
 * @see theme_poll_bar()
 */
function template_preprocess_poll_bar(&$variables) {
  if ($variables['block']) {
    $variables['template_files'][] = 'poll-bar-block';
  }
  $variables['title'] = check_plain($variables['title']);
  $variables['percentage'] = round($variables['votes'] * 100 / max($variables['total_votes'], 1));
}

/**
 * Builds the cancel form for a poll.
 *
 * @ingroup forms
 * @see poll_cancel()
 */
function poll_cancel_form(&$form_state, $nid) {
  // Store the nid so we can get to it in submit functions.
  $form['#nid'] = $nid;

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Cancel your vote'),
    '#submit' => array('poll_cancel')
  );

  $form['#cache'] = TRUE;

  return $form;
}

/**
 * Submit callback for poll_cancel_form
 */
function poll_cancel($form, &$form_state) {
  $node = node_load($form['#nid']);
  global $user;

  if ($user->uid) {
    db_query('DELETE FROM {poll_vote} WHERE nid = %d and uid = %d', $node->nid, $user->uid);
  }
  else {
    db_query("DELETE FROM {poll_vote} WHERE nid = %d and hostname = '%s'", $node->nid, ip_address());
  }

  // Subtract from the votes.
  db_query("UPDATE {poll_choice} SET chvotes = chvotes - 1 WHERE chid = %d", $node->vote);
}

/**
 * Implementation of hook_user_cancel().
 */
function poll_user_cancel($edit, $account, $method) {
  switch ($method) {
    case 'user_cancel_reassign':
      db_update('poll_vote')->fields(array('uid' => 0))->condition('uid', $account->uid)->execute();
      break;

    case 'user_cancel_delete':
      db_delete('poll_vote')->condition('uid', $account->uid)->execute();
      break;
  }
}

