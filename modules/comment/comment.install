<?php
// $Id: comment.install,v 1.51 2009/10/16 13:20:15 dries Exp $

/**
 * @file
 * Install, update and uninstall functions for the comment module.
 */

/**
 * Implement hook_uninstall().
 */
function comment_uninstall() {
  // Remove variables.
  variable_del('comment_block_count');
  $node_types = array_keys(node_type_get_types());
  foreach ($node_types as $node_type) {
    variable_del('comment_' . $node_type);
    variable_del('comment_anonymous_' . $node_type);
    variable_del('comment_controls_' . $node_type);
    variable_del('comment_default_mode_' . $node_type);
    variable_del('comment_default_order_' . $node_type);
    variable_del('comment_default_per_page_' . $node_type);
    variable_del('comment_form_location_' . $node_type);
    variable_del('comment_preview_' . $node_type);
    variable_del('comment_subject_field_' . $node_type);
  }
}

/**
 * Implement hook_enable().
 */
function comment_enable() {
  // Insert records into the node_comment_statistics for nodes that are missing.
  $query = db_select('node', 'n');
  $query->leftJoin('node_comment_statistics', 'ncs', 'ncs.nid = n.nid');
  $query->addField('n', 'changed', 'last_comment_timestamp');
  $query->addField('n', 'uid', 'last_comment_uid');
  $query->addField('n', 'nid');
  $query->addExpression('0', 'comment_count');
  $query->addExpression('NULL', 'last_comment_name');
  $query->isNull('ncs.comment_count');

  db_insert('node_comment_statistics')
    ->from($query)
    ->execute();
}

/**
 * @defgroup updates-6.x-to-7.x Comment updates from 6.x to 7.x
 * @{
 */

/**
 * Remove comment settings for page ordering.
 */
function comment_update_7000() {
  $types = node_type_get_types();
  foreach ($types as $type => $object) {
    variable_del('comment_default_order' . $type);
  }
  return t('Comment order settings removed.');
}

/**
 * Change comment status from published being 0 to being 1
 */
function comment_update_7001() {
  $changes = array(
    3 => 0,
    0 => 1,
    1 => 3,
  );

  foreach ($changes as $old => $new) {
  db_update('comments')
    ->fields(array('status', $new))
    ->condition('status', $old)
    ->execute();
  }
}

/**
 * Rename {comments} table to {comment}.
 */
function comment_update_7002() {
  db_rename_table('comments', 'comment');
}

/**
 * Improve indexes on the comment table.
 */
function comment_update_7003() {
  db_drop_index('comment', 'status');
  db_drop_index('comment', 'pid');
  db_add_index('comment', 'comment_pid_status', array('pid', 'status'));
  db_add_index('comment', 'comment_num_new', array('nid', 'timestamp', 'status'));
}

/**
 * Rename comment display setting variables.
 */
function comment_update_7004() {
  $types = node_type_get_types();
  foreach ($types as $type => $object) {
    $setting = variable_get('comment_default_mode_' . $type, 4);
    if ($setting == 3 || $setting == 4) {
      variable_set('comment_default_mode_' . $type, 1);
    }
    else {
      variable_set('comment_default_mode_' . $type, 0);
    }
  }
}

/**
 * Create comment Field API bundles.
 */
function comment_update_7005() {
  foreach (node_type_get_types() as $info) {
    field_attach_create_bundle('comment', 'comment_node_' . $info->type);
  }
}

/**
 * Create user related indexes.
 */
function comment_update_7006() {
  db_add_index('comment', 'comment_uid', array('uid'));
  db_add_index('node_comment_statistics', 'last_comment_uid', array('last_comment_uid'));
}

/**
 * Split {comment}.timestamp into {comment}.created and {comment}.changed.
 */
function comment_update_7007() {
  // Drop the index associated to timestamp.
  db_drop_index('comment', 'comment_num_new');

  // Create a created column.
  db_add_field('comment', 'created', array(
    'type' => 'int',
    'not null' => TRUE,
    'default' => 0,
  ));

  // Rename the timestamp column to changed.
  db_change_field('comment', 'timestamp', 'changed', array(
    'type' => 'int',
    'not null' => TRUE,
    'default' => 0,
  ));

  // Recreate the index.
  db_add_index('comment', 'comment_num_new', array('nid', 'changed', 'status'));

  // Migrate the data.
  // @todo db_update() should support this.
  db_query('UPDATE {comment} SET created = changed');
}

/**
 * Add language column to the {comment} table.
 */
function comment_update_7008() {
  // Create a language column.
  db_add_field('comment', 'language', array(
    'type' => 'varchar',
    'length' => 12,
    'not null' => TRUE,
    'default' => '',
  ));

  // Create the index.
  db_add_index('comment', 'comment_nid_language', array('nid', 'language'));
}

/**
 * Update preview setting variable to use new constants
 */
function comment_update_7009() {
  foreach (node_type_get_types() as $type => $object) {
    // There were only two comment modes in the past:
    // - 1 was 'required' previously, convert into DRUPAL_REQUIRED (2).
    // - 0 was 'optional' previously, convert into DRUPAL_OPTIONAL (1).
    $original_preview = variable_get('comment_preview_' . $type, 1);
    if ($original_preview) {
      $preview = DRUPAL_REQUIRED;
    }
    else {
      $preview = DRUPAL_OPTIONAL;
    }
    variable_set('comment_preview_' . $type, $preview);
  }
  return array();
}

/**
 * @} End of "defgroup updates-6.x-to-7.x"
 * The next series of updates should start at 8000.
 */

/**
 * Implement hook_schema().
 */
function comment_schema() {
  $schema['comment'] = array(
    'description' => 'Stores comments and associated data.',
    'fields' => array(
      'cid' => array(
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'Primary Key: Unique comment ID.',
      ),
      'pid' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The {comment}.cid to which this comment is a reply. If set to 0, this comment is not a reply to an existing comment.',
      ),
      'nid' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The {node}.nid to which this comment is a reply.',
      ),
      'uid' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The {users}.uid who authored the comment. If set to 0, this comment was created by an anonymous user.',
      ),
      'subject' => array(
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The comment title.',
      ),
      'comment' => array(
        'type' => 'text',
        'not null' => TRUE,
        'size' => 'big',
        'description' => 'The comment body.',
      ),
      'hostname' => array(
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
        'description' => "The author's host name.",
      ),
      'created' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The time that the comment was created, as a Unix timestamp.',
      ),
      'changed' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The time that the comment was last edited, as a Unix timestamp.',
      ),
      'status' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 1,
        'size' => 'tiny',
        'description' => 'The published status of a comment. (0 = Not Published, 1 = Published)',
      ),
      'format' => array(
        'type' => 'int',
        'size' => 'small',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The {filter_format}.format of the comment body.',
      ),
      'thread' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'description' => "The vancode representation of the comment's place in a thread.",
      ),
      'name' => array(
        'type' => 'varchar',
        'length' => 60,
        'not null' => FALSE,
        'description' => "The comment author's name. Uses {users}.name if the user is logged in, otherwise uses the value typed into the comment form.",
      ),
      'mail' => array(
        'type' => 'varchar',
        'length' => 64,
        'not null' => FALSE,
        'description' => "The comment author's e-mail address from the comment form, if user is anonymous, and the 'Anonymous users may/must leave their contact information' setting is turned on.",
      ),
      'homepage' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
        'description' => "The comment author's home page address from the comment form, if user is anonymous, and the 'Anonymous users may/must leave their contact information' setting is turned on.",
      ),
      'language' => array(
        'description' => 'The {languages}.language of this comment.',
        'type' => 'varchar',
        'length' => 12,
        'not null' => TRUE,
        'default' => '',
      ),
    ),
    'indexes' => array(
      'comment_status_pid' => array('pid', 'status'),
      'comment_num_new' => array('nid', 'changed', 'status'),
      'comment_uid' => array('uid'),
      'comment_nid_language' => array('nid', 'language'),
    ),
    'primary key' => array('cid'),
    'foreign keys' => array(
      'nid' => array('node' => 'nid'),
      'uid' => array('users' => 'uid'),
    ),
  );

  $schema['node_comment_statistics'] = array(
    'description' => 'Maintains statistics of node and comments posts to show "new" and "updated" flags.',
    'fields' => array(
      'nid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The {node}.nid for which the statistics are compiled.',
      ),
      'last_comment_timestamp' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The Unix timestamp of the last comment that was posted within this node, from {comment}.timestamp.',
      ),
      'last_comment_name' => array(
        'type' => 'varchar',
        'length' => 60,
        'not null' => FALSE,
        'description' => 'The name of the latest author to post a comment on this node, from {comment}.name.',
      ),
      'last_comment_uid' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The user ID of the latest author to post a comment on this node, from {comment}.uid.',
      ),
      'comment_count' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The total number of comments on this node.',
      ),
    ),
    'primary key' => array('nid'),
    'indexes' => array(
      'node_comment_timestamp' => array('last_comment_timestamp'),
      'comment_count' => array('comment_count'),
      'last_comment_uid' => array('last_comment_uid'),
    ),
    'foreign keys' => array(
      'nid' => array('node' => 'nid'),
      'last_comment_uid' => array('users' => 'uid'),
    ),
  );

  return $schema;
}
