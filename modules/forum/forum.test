<?php
// $Id: forum.test,v 1.34 2009/10/11 03:07:18 webchick Exp $

class ForumTestCase extends DrupalWebTestCase {
  protected $admin_user;
  protected $own_user;
  protected $any_user;
  protected $nid_user;
  protected $container;
  protected $forum;
  protected $root_forum;
  protected $nids;

  public static function getInfo() {
    return array(
      'name' => 'Forum functionality',
      'description' => 'Create, view, edit, delete, and change forum entries and verify its consistency in the database.',
      'group' => 'Forum',
    );
  }

  /**
   * Enable modules and create users with specific permissions.
   */
  function setUp() {
    parent::setUp('taxonomy', 'comment', 'forum');
    // Create users.
    $this->admin_user = $this->drupalCreateUser(array('administer blocks', 'administer forums', 'administer menu', 'administer taxonomy', 'create forum content')); // 'access administration pages'));
    $this->own_user = $this->drupalCreateUser(array('create forum content', 'edit own forum content', 'delete own forum content'));
    $this->any_user = $this->drupalCreateUser(array('create forum content', 'edit any forum content', 'delete any forum content', 'access administration pages'));
    $this->nid_user = $this->drupalCreateUser(array());
  }

  /**
   * Login users, create forum nodes, and test forum functionality through the admin and user interfaces.
   */
  function testForum() {
    // Do the admin tests.
    $this->doAdminTests($this->admin_user);
    // Generate topics to populate the active forum block.
    $this->generateForumTopics($this->forum);

    // Login the nid user to view the forum topics and generate an active forum
    // topics list.
    $this->drupalLogin($this->nid_user);
    $this->viewForumTopics($this->nids);

    // Do basic tests for the any forum user.
    $this->doBasicTests($this->any_user, TRUE);

    // Create another forum node for the any forum user.
    $node = $this->createForumTopic($this->forum, FALSE);

    // Do basic tests for the own forum user.
    $this->doBasicTests($this->own_user, FALSE);

    // Verify the own forum user only has access to the forum view node.
    $this->verifyForums($this->any_user, $node, FALSE, 403);
    // Create another forum node for the own forum user.
    $node = $this->createForumTopic($this->forum, FALSE);

    // Login the any forum user.
    $this->drupalLogin($this->any_user);
    // Verify the any forum user has access to all the forum nodes.
    $this->verifyForums($this->own_user, $node, TRUE);

    // Verify the topic and post counts on the forum page.
    $this->drupalGet('forum');
    $this->assertRaw("<td class=\"topics\">\n          6                  </td>");
    $this->assertRaw('<td class="posts">6</td>');
  }

  /**
   * Run admin tests on the admin user.
   *
   * @param object $user The logged in user.
   */
  private function doAdminTests($user) {
    // Login the user.
    $this->drupalLogin($user);

    // Enable the active forum block.
    $edit = array();
    $edit['forum_active[region]'] = 'sidebar_second';
    $this->drupalPost('admin/structure/block', $edit, t('Save blocks'));
    $this->assertResponse(200);
    $this->assertText(t('The block settings have been updated.'), t('Active forum topics forum block was enabled'));

    // Enable the new forum block.
    $edit = array();
    $edit['forum_new[region]'] = 'sidebar_second';
    $this->drupalPost('admin/structure/block', $edit, t('Save blocks'));
    $this->assertResponse(200);
    $this->assertText(t('The block settings have been updated.'), t('[New forum topics] Forum block was enabled'));

    // Retrieve forum menu id.
    $mlid = db_query_range("SELECT mlid FROM {menu_links} WHERE link_path = 'forum' AND menu_name = 'navigation' AND module = 'system' ORDER BY mlid ASC", 0, 1)->fetchField();

    // Add forum to navigation menu.
    $edit = array();
    $this->drupalPost('admin/structure/menu/manage/navigation', $edit, t('Save configuration'));
    $this->assertResponse(200);

    // Edit forum taxonomy.
    // Restoration of the settings fails and causes subsequent tests to fail.
    $this->container = $this->editForumTaxonomy();
    // Create forum container.
    $this->container = $this->createForum('container');
    // Create forum inside the forum container.
    $this->forum = $this->createForum('forum', $this->container['tid']);
    // Create second forum in container.
    $this->delete_forum = $this->createForum('forum', $this->container['tid']);
    // Delete this second form.
    $this->deleteForum($this->delete_forum['tid']);
    // Create forum at the top (root) level.
    $this->root_forum = $this->createForum('forum');
  }

  /**
   * Edit the forum taxonomy.
   */
  function editForumTaxonomy() {
    // Backup forum taxonomy.
    $vid = variable_get('forum_nav_vocabulary', '');
    $original_settings = taxonomy_vocabulary_load($vid);

    // Generate a random name/description.
    $title = $this->randomName(10);
    $description = $this->randomName(100);

    $edit = array(
      'name' => $title,
      'description' => $description,
      'machine_name' => drupal_strtolower(drupal_substr($this->randomName(), 3, 9)),
    );

    // Edit the vocabulary.
    $this->drupalPost('admin/structure/taxonomy/' . $vid, $edit, t('Save'));
    $this->assertResponse(200);
    $this->assertRaw(t('Updated vocabulary %name.', array('%name' => $title)), t('Vocabulary was edited'));

    // Grab the newly edited vocabulary.
    entity_get_controller('taxonomy_vocabulary')->resetCache();
    $current_settings = taxonomy_vocabulary_load($vid);

    // Make sure we actually edited the vocabulary properly.
    $this->assertEqual($current_settings->name, $title, t('The name was updated'));
    $this->assertEqual($current_settings->description, $description, t('The description was updated'));

    // Restore the original vocabulary.
    taxonomy_vocabulary_save($original_settings);
    drupal_static_reset('taxonomy_vocabulary_load');
    $current_settings = taxonomy_vocabulary_load($vid);
    $this->assertEqual($current_settings->name, $original_settings->name, 'The original vocabulary settings were restored');
  }

  /**
   * Create a forum container or a forum.
   *
   * @param $type
   *   Forum type (forum container or forum).
   * @param $parent
   *   Forum parent (default = 0 = a root forum; >0 = a forum container or
   *   another forum).
   * @return
   *   taxonomy_term_data created.
   */
  function createForum($type, $parent = 0) {
    // Generate a random name/description.
    $name = $this->randomName(10);
    $description = $this->randomName(100);

    $edit = array(
      'name' => $name,
      'description' => $description,
      'parent[0]' => $parent,
      'weight' => '0',
    );

    // Create forum.
    $this->drupalPost('admin/structure/forum/add/' . $type, $edit, t('Save'));
    $this->assertResponse(200);
    $type = ($type == 'container') ? 'forum container' : 'forum';
    $this->assertRaw(t('Created new @type %term.', array('%term' => $name, '@type' => t($type))), t(ucfirst($type) . ' was created'));

    // Verify forum.
    $term = db_query("SELECT * FROM {taxonomy_term_data} t WHERE t.vid = :vid AND t.name = :name AND t.description = :desc", array(':vid' => variable_get('forum_nav_vocabulary', ''), ':name' => $name, ':desc' => $description))->fetchAssoc();
    $this->assertTrue(!empty($term), 'The ' . $type . ' exists in the database');

    // Verify forum hierarchy.
    $tid = $term['tid'];
    $parent_tid = db_query("SELECT t.parent FROM {taxonomy_term_hierarchy} t WHERE t.tid = :tid", array(':tid' => $tid))->fetchField();
    $this->assertTrue($parent == $parent_tid, 'The ' . $type . ' is linked to its container');

    return $term;
  }

  /**
   * Delete a forum.
   *
   * @param $tid
   *   The forum ID.
   */
  function deleteForum($tid) {
    // Delete the forum.
    $this->drupalPost('admin/structure/forum/edit/forum/' . $tid, array(), t('Delete'));
    $this->drupalPost(NULL, NULL, t('Delete'));

    // Assert that the forum no longer exists.
    $this->drupalGet('forum/' . $tid);
    $this->assertRaw(t('No forums defined'), 'The forum was not found');
  }

  /**
   * Run basic tests on the indicated user.
   *
   * @param $user
   *   The logged in user.
   * @param $admin
   *   User has 'access administration pages' privilege.
   */
  private function doBasicTests($user, $admin) {
    // Login the user.
    $this->drupalLogin($user);
    // Attempt to create forum topic under a container.
    $this->createForumTopic($this->container, TRUE);
    // Create forum node.
    $node = $this->createForumTopic($this->forum, FALSE);
    // Verify the user has access to all the forum nodes.
    $this->verifyForums($user, $node, $admin);
  }

  /**
   * Create forum topic.
   *
   * @param array $forum Forum array.
   * @param boolean $container True if $forum is a container.
   * @return object Topic node created.
   */
  function createForumTopic($forum, $container = FALSE) {
    // Generate a random subject/body.
    $title = $this->randomName(20);
    $body = $this->randomName(200);

    // Without this being set, post variable equals the first non-blank in
    // select items list.
    $tid = $forum['tid'];

    $langcode = FIELD_LANGUAGE_NONE;
    $edit = array(
      "title[$langcode][0][value]" => $title,
      "body[$langcode][0][value]" => $body,
      "taxonomy_forums[$langcode][value]" => $tid,
    );

    // TODO The taxonomy select value is set by drupal code when the tid is part
    // of the url. However, unless a tid is passed in the edit array, when
    // drupalPost() runs, the select value is not preserved. Instead, the post
    // variables seem to pick up the first non-blank value in the select list.
    // Create forum topic.
    $this->drupalPost('node/add/forum/', $edit, t('Save'));
    $type = t('Forum topic');
    if ($container) {
      $this->assertNoRaw(t('@type %title has been created.', array('@type' => $type, '%title' => $title)), t('Forum topic was not created'));
      $this->assertRaw(t('The item %title is only a container for forums.', array('%title' => $forum['name'])), t('Error message was shown'));
      return;
    }
    else {
      $this->assertRaw(t('@type %title has been created.', array('%title' => $title, '@type' => $type)), t('Forum topic was created'));
      $this->assertNoRaw(t('The item %title is only a container for forums.', array('%title' => $forum['name'])), t('No error message was shown'));
    }

    // Retrieve node object.
    $node = $this->drupalGetNodeByTitle($title);
    $this->assertTrue($node != NULL, t('Node @title was loaded', array('@title' => $title)));

    // View forum topic.
    $this->drupalGet('node/' . $node->nid);
    $this->assertRaw($title, t('Subject was found'));
    $this->assertRaw($body, t('Body was found'));

    return $node;
  }

  /**
   * Verify the logged in user has access to a forum nodes.
   *
   * @param $node_user
   *   The user who creates the node.
   * @param $node
   *   The node being checked.
   * @param $admin
   *   Boolean to indicate whether the user can 'access administration pages'.
   * @param $response
   *   The exptected HTTP response code.
   */
  private function verifyForums($node_user, $node, $admin, $response = 200) {
    $crumb = '›';
    $quote = '&#039;';

    $response2 = ($admin) ? 200 : 403;

    // View forum help node.
    $this->drupalGet('admin/help/forum');
    $this->assertResponse($response2);
    if ($response2 == 200) {
      $this->assertTitle(t('Forum | Drupal'), t('Forum help title was displayed'));
      $this->assertText(t('Forum'), t('Forum help node was displayed'));
    }

    // Verify the forum blocks were displayed.
    $this->drupalGet('');
    $this->assertResponse(200);
    $this->assertText(t('New forum topics'), t('[New forum topics] Forum block was displayed'));

    // View forum container page.
    $this->verifyForumView($this->container);
    // View forum page.
    $this->verifyForumView($this->forum, $this->container);
    // View root forum page.
    $this->verifyForumView($this->root_forum);

    // View forum node.
    $this->drupalGet('node/' . $node->nid);
    $this->assertResponse(200);
    $this->assertTitle($node->title[FIELD_LANGUAGE_NONE][0]['value'] . ' | Drupal', t('Forum node was displayed'));
    $this->assertText(t('Home ' . $crumb . ' Forums ' . $crumb . ' @container ' . $crumb . ' @forum', array('@container' => $this->container['name'], '@forum' => $this->forum['name'])), t('Breadcrumbs were displayed'));

    // View forum edit node.
    $this->drupalGet('node/' . $node->nid . '/edit');
    $this->assertResponse($response);
    if ($response == 200) {
      $this->assertTitle('Edit Forum topic ' . $node->title[FIELD_LANGUAGE_NONE][0]['value'] . ' | Drupal', t('Forum edit node was displayed'));
    }

    if ($response == 200) {
      // Edit forum node (including moving it to another forum).
      $edit = array();
      $langcode = FIELD_LANGUAGE_NONE;
      $edit["title[$langcode][0][value]"] = 'node/' . $node->nid;
      $edit["body[$langcode][0][value]"] = $this->randomName(256);
      // Assume the topic is initially associated with $forum.
      $edit["taxonomy_forums[$langcode][value]"] = $this->root_forum['tid'];
      $edit['shadow'] = TRUE;
      $this->drupalPost('node/' . $node->nid . '/edit', $edit, t('Save'));
      $this->assertRaw(t('Forum topic %title has been updated.', array('%title' => $edit["title[$langcode][0][value]"])), t('Forum node was edited'));

      // Verify topic was moved to a different forum.
      $forum_tid = db_query("SELECT tid FROM {forum} WHERE nid = :nid AND vid = :vid", array(
        ':nid' => $node->nid,
        ':vid' => $node->vid,
      ))->fetchField();
      $this->assertTrue($forum_tid == $this->root_forum['tid'], 'The forum topic is linked to a different forum');

      // Delete forum node.
      $this->drupalPost('node/' . $node->nid . '/delete', array(), t('Delete'));
      $this->assertResponse($response);
      $this->assertRaw(t('Forum topic %title has been deleted.', array('%title' => $edit["title[$langcode][0][value]"])), t('Forum node was deleted'));
    }
  }

  /**
   * Verify display of forum page.
   *
   * @param $forum
   *   A row from taxonomy_term_data table in array.
   */
  private function verifyForumView($forum, $parent = NULL) {
    $crumb = '›';

    // View forum page.
    $this->drupalGet('forum/' . $forum['tid']);
    $this->assertResponse(200);
    $this->assertTitle($forum['name'] . ' | Drupal', t('Forum name was displayed'));
    if (isset($parent)) {
      $this->assertText(t('Home ' . $crumb . ' Forums ' . $crumb . ' @name', array('@name' => $parent['name'])), t('Breadcrumbs were displayed'));
    }
    else {
      $this->assertText(t('Home ' . $crumb . ' Forums'), t('Breadcrumbs were displayed'));
    }
  }

  /**
   * Generate forum topics to test display of active forum block.
   *
   * @param array $forum Forum array (a row from taxonomy_term_data table).
   */
  private function generateForumTopics($forum) {
    $this->nids = array();
    for ($i = 0; $i < 5; $i++) {
      $node = $this->createForumTopic($this->forum, FALSE);
      $this->nids[] = $node->nid;
    }
  }

  /**
   * View forum topics to test display of active forum block.
   *
   * @todo The logic here is completely incorrect, since the active
   * forum topics block is determined by comments on the node, not by views.
   * @todo DIE
   *
   * @param $nids
   *   An array of forum node IDs.
   */
  private function viewForumTopics($nids) {
    $crumb = '›';

    for ($i = 0; $i < 2; $i++) {
      foreach ($nids as $nid) {
        $this->drupalGet('node/' . $nid);
        $this->drupalGet('node/' . $nid);
        $this->drupalGet('node/' . $nid);
      }
    }
  }
}
