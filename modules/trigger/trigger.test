<?php
// $Id: trigger.test,v 1.17 2009/09/01 16:50:12 webchick Exp $

class TriggerContentTestCase extends DrupalWebTestCase {
  var $_cleanup_roles = array();
  var $_cleanup_users = array();

  public static function getInfo() {
    return array(
      'name' => 'Trigger content (node) actions',
      'description' => 'Perform various tests with content actions.' ,
      'group' => 'Trigger',
    );
  }

  function setUp() {
    parent::setUp('trigger');
  }

  /**
   * Various tests, all in one function to assure they happen in the right order.
   */
  function testActionsContent() {
    global $user;
    $content_actions = array('node_publish_action', 'node_unpublish_action', 'node_make_sticky_action', 'node_make_unsticky_action', 'node_promote_action', 'node_unpromote_action');

    foreach ($content_actions as $action) {
      $hash = md5($action);
      $info = $this->actionInfo($action);

      // Test 1: Assign an action to a trigger, then pull the trigger, and make sure the actions fire.
      $test_user = $this->drupalCreateUser(array('administer actions'));
      $this->drupalLogin($test_user);
      $edit = array('aid' => $hash);
      $this->drupalPost('admin/structure/trigger/node', $edit, t('Assign'));
      // Create an unpublished node.
      $web_user = $this->drupalCreateUser(array('create page content', 'access content', 'administer nodes'));
      $this->drupalLogin($web_user);
      $edit = array();
      $edit['title'] = '!SimpleTest test node! ' . $this->randomName(10);
      $langcode = FIELD_LANGUAGE_NONE;
      $edit["body[$langcode][0][value]"] = '!SimpleTest test body! ' . $this->randomName(32) . ' ' . $this->randomName(32);
      $edit[$info['property']] = !$info['expected'];
      $this->drupalPost('node/add/page', $edit, t('Save'));
      // Make sure the text we want appears.
      $this->assertRaw(t('!post %title has been created.', array('!post' => 'Page', '%title' => $edit['title'])), t('Make sure the page has actually been created'));
      // Action should have been fired.
      $loaded_node = $this->drupalGetNodeByTitle($edit['title']);;
      $this->assertTrue($loaded_node->$info['property'] == $info['expected'], t('Make sure the @action action fired.', array('@action' => $info['name'])));
      // Leave action assigned for next test

      // Test 2: There should be an error when the action is assigned to the trigger twice.
      $test_user = $this->drupalCreateUser(array('administer actions'));
      $this->drupalLogin($test_user);
      $edit = array('aid' => $hash);
      $this->drupalPost('admin/structure/trigger/node', $edit, t('Assign'));
      $edit = array('aid' => $hash);
      $this->drupalPost('admin/structure/trigger/node', $edit, t('Assign'));
      $this->assertRaw(t('The action you chose is already assigned to that trigger.'), t('Check to make sure an error occurs when assigning an action to a trigger twice.'));

      // Test 3: The action should be able to be unassigned from a trigger.
      $this->drupalPost('admin/structure/trigger/unassign/node/presave/' . $hash, array(), t('Unassign'));
      $this->assertRaw(t('Action %action has been unassigned.', array('%action' => ucfirst($info['name']))), t('Check to make sure the @action action can be unassigned from the trigger.', array('@action' => $info['name'])));
      $assigned = db_query("SELECT COUNT(*) FROM {trigger_assignments} WHERE aid IN (:keys)", array(':keys' => $content_actions))->fetchField();
      $this->assertFalse($assigned, t('Check to make sure unassign worked properly at the database level.'));
    }
  }

  /**
   * Helper function for testActionsContent(): returns some info about each of the content actions.
   *
   * @param $action
   *   The name of the action to return info about.
   * @return
   *   An associative array of info about the action.
   */
  function actionInfo($action) {
    $info = array(
      'node_publish_action' => array(
        'property' => 'status',
        'expected' => 1,
        'name' => t('publish post'),
      ),
      'node_unpublish_action' => array(
        'property' => 'status',
        'expected' => 0,
        'name' => t('unpublish post'),
      ),
      'node_make_sticky_action' => array(
        'property' => 'sticky',
        'expected' => 1,
        'name' => t('make post sticky'),
      ),
      'node_make_unsticky_action' => array(
        'property' => 'sticky',
        'expected' => 0,
        'name' => t('make post unsticky'),
      ),
      'node_promote_action' => array(
        'property' => 'promote',
        'expected' => 1,
        'name' => t('promote post to front page'),
      ),
      'node_unpromote_action' => array(
        'property' => 'promote',
        'expected' => 0,
        'name' => t('remove post from front page'),
      ),
    );
    return $info[$action];
  }
}

/**
 * Test cron trigger.
 */
class TriggerCronTestCase extends DrupalWebTestCase {
  public static function getInfo() {
    return array(
      'name' => 'Trigger cron (system) actions',
      'description' => 'Perform various tests with cron trigger.' ,
      'group' => 'Trigger',
    );
  }

  function setUp() {
    parent::setUp('trigger', 'trigger_test');
  }

  /**
   * Test assigning multiple actions to the cron trigger.
   *
   * This test ensures that both simple and multiple complex actions
   * succeed properly. This is done in the cron trigger test because
   * cron allows passing multiple actions in at once.
   */
  function testActionsCron() {
    // Create an administrative user.
    $test_user = $this->drupalCreateUser(array('administer actions'));
    $this->drupalLogin($test_user);
 
    // Assign a non-configurable action to the cron run trigger.
    $edit = array('aid' => md5('trigger_test_system_cron_action'));
    $this->drupalPost('admin/structure/trigger/cron', $edit, t('Assign'));
 
    // Assign a configurable action to the cron trigger.
    $hash = md5('trigger_test_system_cron_conf_action');
    $action_description = $this->randomName();
    $edit = array(
      'actions_description' => $action_description,
      'subject' => $action_description,
    );
    $this->drupalPost('admin/config/system/actions/configure/' . $hash, $edit, t('Save'));
    $edit = array('aid' => md5('1'));
    $this->drupalPost('admin/structure/trigger/cron', $edit, t('Assign'));
 
    // Add a second configurable action to the cron trigger.
    $action_description = $this->randomName();
    $edit = array(
      'actions_description' => $action_description,
      'subject' => $action_description,
    );
    $this->drupalPost('admin/config/system/actions/configure/' . $hash, $edit, t('Save'));
    $edit = array('aid' => md5('2'));
    $this->drupalPost('admin/structure/trigger/cron', $edit, t('Assign'));
 
    // Force a cron run.
    drupal_cron_run();
 
    // Make sure the non-configurable action has fired.
    $action_run = variable_get('trigger_test_system_cron_action', FALSE);
    $this->assertTrue($action_run, t('Check that the cron run triggered the test action.'));
 
    // Make sure that both configurable actions have fired.
    $action_run = variable_get('trigger_test_system_cron_conf_action', 0) == 2;
    $this->assertTrue($action_run, t('Check that the cron run triggered both complex actions.'));
  }
}
