<?php
// $Id: locale.install,v 1.44 2009/06/08 05:00:11 dries Exp $

/**
 * @file
 * Install, update and uninstall functions for the locale module.
 */

/**
 * Implement hook_install().
 */
function locale_install() {
  // locales_source.source and locales_target.target are not used as binary
  // fields; non-MySQL database servers need to ensure the field type is text
  // and that LIKE produces a case-sensitive comparison.

  // Create tables.
  drupal_install_schema('locale');

  db_insert('languages')
    ->fields(array(
      'language' => 'en',
      'name' => 'English',
      'native' => 'English',
      'direction' => 0,
      'enabled' => 1,
      'weight' => 0,
      'javascript' => '',
    ))
    ->execute();
}

/**
 * @defgroup updates-5.x-to-6.x Locale updates from 5.x to 6.x
 * @{
 */

/**
 * {locales_meta} table became {languages}.
 */
function locale_update_6000() {
  $ret = array();

  $schema['languages'] = array(
    'fields' => array(
      'language' => array(
        'type' => 'varchar',
        'length' => 12,
        'not null' => TRUE,
        'default' => '',
      ),
      'name' => array(
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
      ),
      'native' => array(
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
      ),
      'direction' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'enabled' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'plurals' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'formula' => array(
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
      ),
      'domain' => array(
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
      ),
      'prefix' => array(
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
      ),
      'weight' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'javascript' => array( //Adds a column to store the filename of the JavaScript translation file.
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
    ),
    'primary key' => array('language'),
    'indexes' => array(
      'list' => array('weight', 'name'),
    ),
  );

  db_create_table($ret, 'languages', $schema['languages']);

  // Save the languages
  $ret[] = update_sql("INSERT INTO {languages} (language, name, native, direction, enabled, plurals, formula, domain, prefix, weight) SELECT locale, name, name, 0, enabled, plurals, formula, '', locale, 0 FROM {locales_meta}");

  // Save the language count in the variable table
  $count = db_result(db_query('SELECT COUNT(*) FROM {languages} WHERE enabled = 1'));
  variable_set('language_count', $count);

  // Save the default language in the variable table
  $default = db_fetch_object(db_query('SELECT * FROM {locales_meta} WHERE isdefault = 1'));
  variable_set('language_default', (object) array('language' => $default->locale, 'name' => $default->name, 'native' => '', 'direction' => 0, 'enabled' => 1, 'plurals' => $default->plurals, 'formula' => $default->formula, 'domain' => '', 'prefix' => $default->locale, 'weight' => 0));

  $ret[] = update_sql("DROP TABLE {locales_meta}");
  return $ret;
}

/**
 * Change locale column to language. The language column is added by
 * update_fix_d6_requirements() in update.php to avoid a large number
 * of error messages from update.php. All we need to do here is copy
 * locale to language and then drop locale.
 */
function locale_update_6001() {
  $ret = array();
  $ret[] = update_sql('UPDATE {locales_target} SET language = locale');
  db_drop_field($ret, 'locales_target', 'locale');
  return $ret;
}

/**
 * Remove empty translations, we don't need these anymore.
 */
function locale_update_6002() {
  $ret = array();
  $ret[] = update_sql("DELETE FROM {locales_target} WHERE translation = ''");
  return $ret;
}

/**
 * Prune strings with no translations (will be automatically re-registered if still in use)
 */
function locale_update_6003() {
  $ret = array();
  $ret[] = update_sql("DELETE FROM {locales_source} WHERE lid NOT IN (SELECT lid FROM {locales_target})");
  return $ret;
}

/**
 * Fix remaining inconsistent indexes.
 */
function locale_update_6004() {
  $ret = array();
  db_add_index($ret, 'locales_target', 'language', array('language'));

  switch ($GLOBALS['db_type']) {
    case 'pgsql':
      db_drop_index($ret, 'locales_source', 'source');
      db_add_index($ret, 'locales_source', 'source', array(array('source', 30)));
      break;
  }

  return $ret;
}

/**
 * Change language setting variable of content types.
 *
 * Use language_content_type_<content_type> instead of language_<content_type>
 * so content types such as 'default', 'count' or 'negotiation' will not
 * interfere with language variables.
 */
function locale_update_6005() {
  foreach (node_type_get_types() as $type => $content_type) {
    // Default to NULL, so we can skip dealing with non-existent settings.
    $setting = variable_get('language_' . $type);
    if ($type == 'default' && is_numeric($setting)) {
      // language_default was overwritten with the content type setting,
      // so reset the default language and save the content type setting.
      variable_set('language_content_type_default', $setting);
      variable_del('language_default');
      drupal_set_message('The default language setting has been reset to its default value. Check the ' . l('language configuration page', 'admin/settings/language') . ' to configure it correctly.');
    }
    elseif ($type == 'negotiation') {
      // language_content_type_negotiation is an integer either if it is
      // the negotiation setting or the content type setting.
      // The language_negotiation setting is not reset, but
      // the user is alerted that this setting possibly was overwritten
      variable_set('language_content_type_negotiation', $setting);
      drupal_set_message('The language negotiation setting was possibly overwritten by a content type of the same name. Check the ' . l('language configuration page', 'admin/settings/language/configure') . ' and the ' . l('<em>' . $content_type->name . "</em> content type's multilingual support settings", 'admin/build/types/negotiation', array('html' => TRUE)) . ' to configure them correctly.');
    }
    elseif (!is_null($setting)) {
      // Change the language setting variable for any other content type.
      // Do not worry about language_count, it will be updated below.
      variable_set('language_content_type_' . $type, $setting);
      variable_del('language_' . $type);
    }
  }
  // Update language count variable that might be overwritten.
  $count = db_result(db_query('SELECT COUNT(*) FROM {languages} WHERE enabled = 1'));
  variable_set('language_count', $count);
  return array();
}

/**
 * Allow longer location.
 */
function locale_update_6006() {
  $ret = array();
  db_change_field($ret, 'locales_source', 'location', 'location', array('type' => 'text', 'not null' => FALSE));
  return $ret;
}

/**
 * @} End of "defgroup updates-5.x-to-6.x"
 */

/**
 * @defgroup updates-6.x-to-7.x Locale updates from 6.x to 7.x
 * @{
 */

/**
 * Allow longer location.
 */
function locale_update_7000() {
  $ret = array();
  db_drop_index($ret, 'locales_source', 'source');
  db_add_index($ret, 'locales_source', 'source_context', array(array('source', 30), 'context'));
  return $ret;
}

/**
 * @} End of "defgroup updates-6.x-to-7.x"
 */

/**
 * Implement hook_uninstall().
 */
function locale_uninstall() {
  // Delete all JavaScript translation files.
  $locale_js_directory = file_create_path(variable_get('locale_js_directory', 'languages'));
  $files = db_query('SELECT language, javascript FROM {languages}');
  foreach ($files as $file) {
    if (!empty($file->javascript)) {
      file_unmanaged_delete(file_create_path($locale_js_directory . '/' . $file->language . '_' . $file->javascript . '.js'));
    }
  }
  // Delete the JavaScript translations directory if empty.
  @rmdir($locale_js_directory);

  // Clear variables.
  variable_del('language_default');
  variable_del('language_count');
  variable_del('language_negotiation');
  variable_del('javascript_parsed');
  variable_del('language_content_type_default');
  variable_del('language_content_type_negotiation');
  variable_del('locale_cache_strings');
  variable_del('locale_js_directory');

  foreach (node_type_get_types() as $type => $content_type) {
    $setting = variable_del('language_content_type_' . $type);
  }

  // Switch back to English: with a $language->language value different from 'en'
  // successive calls of t() might result in calling locale(), which in turn might
  // try to query the unexisting {locales_source} and {locales_target} tables.
  drupal_init_language();

  // Remove tables.
  drupal_uninstall_schema('locale');
}

/**
 * Implement hook_schema().
 */
function locale_schema() {
  $schema['languages'] = array(
    'description' => 'List of all available languages in the system.',
    'fields' => array(
      'language' => array(
        'type' => 'varchar',
        'length' => 12,
        'not null' => TRUE,
        'default' => '',
        'description' => "Language code, e.g. 'de' or 'en-US'.",
      ),
      'name' => array(
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Language name in English.',
      ),
      'native' => array(
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Native language name.',
      ),
      'direction' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Direction of language (Left-to-Right = 0, Right-to-Left = 1).',
      ),
      'enabled' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Enabled flag (1 = Enabled, 0 = Disabled).',
      ),
      'plurals' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Number of plural indexes in this language.',
      ),
      'formula' => array(
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Plural formula in PHP code to evaluate to get plural indexes.',
      ),
      'domain' => array(
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Domain to use for this language.',
      ),
      'prefix' => array(
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Path prefix to use for this language.',
      ),
      'weight' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Weight, used in lists of languages.',
      ),
      'javascript' => array(
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Location of JavaScript translation file.',
      ),
    ),
    'primary key' => array('language'),
    'indexes' => array(
      'list' => array('weight', 'name'),
    ),
  );

  $schema['locales_source'] = array(
    'description' => 'List of English source strings.',
    'fields' => array(
      'lid' => array(
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'Unique identifier of this string.',
      ),
      'location' => array(
        'type' => 'text',
        'not null' => FALSE,
        'size' => 'big',
        'description' => 'Drupal path in case of online discovered translations or file path in case of imported strings.',
      ),
      'textgroup' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => 'default',
        'description' => 'A module defined group of translations, see hook_locale().',
      ),
      'source' => array(
        'type' => 'text',
        'mysql_type' => 'blob',
        'not null' => TRUE,
        'description' => 'The original string in English.',
      ),
      'context' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The context this string applies to.',
      ),
      'version' => array(
        'type' => 'varchar',
        'length' => 20,
        'not null' => TRUE,
        'default' => 'none',
        'description' => 'Version of Drupal, where the string was last used (for locales optimization).',
      ),
    ),
    'primary key' => array('lid'),
    'indexes' => array(
      'source_context' => array(array('source', 30), 'context'),
    ),
  );

  $schema['locales_target'] = array(
    'description' => 'Stores translated versions of strings.',
    'fields' => array(
      'lid' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Source string ID. References {locales_source}.lid.',
      ),
      'translation' => array(
        'type' => 'text',
        'mysql_type' => 'blob',
        'not null' => TRUE,
        'description' => 'Translation string value in this language.',
      ),
      'language' => array(
        'type' => 'varchar',
        'length' => 12,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Language code. References {languages}.language.',
      ),
      'plid' => array(
        'type' => 'int',
        'not null' => TRUE, // This should be NULL for no referenced string, not zero.
        'default' => 0,
        'description' => 'Parent lid (lid of the previous string in the plural chain) in case of plural strings. References {locales_source}.lid.',
      ),
      'plural' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Plural index number in case of plural strings.',
      ),
    ),
    'primary key' => array('language', 'lid', 'plural'),
    'foreign keys' => array(
      'lid' => array('locales_source' => 'lid'),
    ),
    'indexes' => array(
      'lid'      => array('lid'),
      'plid'     => array('plid'),
      'plural'   => array('plural'),
    ),
  );

  return $schema;
}

