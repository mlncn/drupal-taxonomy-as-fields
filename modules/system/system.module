<?php
// $Id: system.module,v 1.748 2009/08/15 15:57:44 dries Exp $

/**
 * @file
 * Configuration system that lets administrators modify the workings of the site.
 */

/**
 * The current system version.
 */
define('VERSION', '7.0-dev');

/**
 * Core API compatibility.
 */
define('DRUPAL_CORE_COMPATIBILITY', '7.x');

/**
 * Minimum supported version of PHP.
 */
define('DRUPAL_MINIMUM_PHP',    '5.2.0');

/**
 * Minimum recommended value of PHP memory_limit.
 */
define('DRUPAL_MINIMUM_PHP_MEMORY_LIMIT',    '16M');

/**
 * Minimum supported version of MySQL, if it is used.
 */
define('DRUPAL_MINIMUM_MYSQL',  '5.0');

/**
 * Minimum supported version of PostgreSQL, if it is used.
 */
define('DRUPAL_MINIMUM_PGSQL',  '8.3');

/**
 * Maximum age of temporary files in seconds.
 */
define('DRUPAL_MAXIMUM_TEMP_FILE_AGE', 21600);

/**
 * New users will be set to the default time zone at registration.
 */
define('DRUPAL_USER_TIMEZONE_DEFAULT', 0);

/**
 * New users will get an empty time zone at registration.
 */
define('DRUPAL_USER_TIMEZONE_EMPTY', 1);

/**
 * New users will select their own timezone at registration.
 */
define('DRUPAL_USER_TIMEZONE_SELECT', 2);

 /**
 * Disabled option on forms and settings
 */
define('DRUPAL_DISABLED', 0);

/**
 * Optional option on forms and settings
 */
define('DRUPAL_OPTIONAL', 1);

/**
 * Required option on forms and settings
 */
define('DRUPAL_REQUIRED', 2);

/**
 * Return only visible regions. @see system_region_list().
 */
define('REGIONS_VISIBLE', 'visible');

/**
 * Return all visible regions. @see system_region_list().
 */
define('REGIONS_ALL', 'all');


/**
 * Implement hook_help().
 */
function system_help($path, $arg) {
  global $base_url;

  switch ($path) {
    case 'admin/help#system':
      $output = '<p>' . t('The system module is at the foundation of your Drupal website, and provides basic but extensible functionality for use by other modules and themes. Some integral elements of Drupal are contained in and managed by the system module, including caching, enabling or disabling of modules and themes, preparing and displaying the administrative page, and configuring fundamental site settings. A number of key system maintenance operations are also part of the system module.') . '</p>';
      $output .= '<p>' . t('The system module provides:') . '</p>';
      $output .= '<ul><li>' . t('support for enabling and disabling <a href="@modules">modules</a>. Drupal comes packaged with a number of core modules; each module provides a discrete set of features and may be enabled depending on the needs of your site. A wide array of additional modules contributed by members of the Drupal community are available for download at the <a href="@drupal-modules">Drupal.org module page</a>.', array('@modules' => url('admin/config/modules'), '@drupal-modules' => 'http://drupal.org/project/modules')) . '</li>';
      $output .= '<li>' . t('support for enabling and disabling <a href="@themes">themes</a>, which determine the design and presentation of your site. Drupal comes packaged with several core themes and additional contributed themes are available at the <a href="@drupal-themes">Drupal.org theme page</a>.', array('@themes' => url('admin/appearance'), '@drupal-themes' => 'http://drupal.org/project/themes')) . '</li>';
      $output .= '<li>' . t('a robust <a href="@cache-settings">caching system</a> that allows the efficient re-use of previously-constructed web pages and web page components. Drupal stores the pages requested by anonymous users in a compressed format; depending on your site configuration and the amount of your web traffic tied to anonymous visitors, Drupal\'s caching system may significantly increase the speed of your site.', array('@cache-settings' => url('admin/config/development/performance'))) . '</li>';
      $output .= '<li>' . t('a set of routine administrative operations that rely on a correctly-configured <a href="@cron">cron maintenance task</a> to run automatically. A number of other modules, including the feed aggregator, and search also rely on <a href="@cron">cron maintenance tasks</a>. For more information, see the online handbook entry for <a href="@handbook">configuring cron jobs</a>.', array('@cron' => url('admin/reports/status'), '@handbook' => 'http://drupal.org/cron')) . '</li>';
      $output .= '<li>' . t('basic configuration options for your site, including <a href="@regional-settings">date and time settings</a>, <a href="@file-system">file system settings</a>, <a href="@clean-url">clean URL support</a>, <a href="@site-info">site name and other information</a>, and a <a href="@maintenance-mode">maintenance mode</a> for taking your site temporarily offline.', array('@regional-settings' => url('admin/settings/regional-settings'), '@file-system' => url('admin/settings/file-system'), '@clean-url' => url('admin/settings/clean-urls'), '@site-info' => url('admin/settings/site-information'), '@maintenance-mode' => url('admin/config/development/maintenance'))) . '</li></ul>';
      $output .= '<p>' . t('For more information, see the online handbook entry for <a href="@system">System module</a>.', array('@system' => 'http://drupal.org/handbook/modules/system/')) . '</p>';
      return $output;
    case 'admin/by-module':
      return '<p>' . t('This page shows you all available administration tasks for each module.') . '</p>';
    case 'admin/appearance':
      $output = '<p>' . t('Select which themes are available to your users and specify the default theme. To configure site-wide display settings, click the "configure" task above. Alternatively, to override these settings in a specific theme, click the "configure" link for that theme. Note that different themes may have different regions available for displaying content; for consistency in presentation, you may wish to enable only one theme.') . '</p>';
      $output .= '<p>' . t('To change the appearance of your site, a number of <a href="@themes">contributed themes</a> are available.', array('@themes' => 'http://drupal.org/project/themes')) . '</p>';
      return $output;
    case 'admin/appearance/settings/' . $arg[4]:
      $reference = explode('.', $arg[4], 2);
      $theme = array_pop($reference);
      return '<p>' . t('These options control the display settings for the <code>%template</code> theme. When your site is displayed using this theme, these settings will be used. By clicking "Reset to defaults," you can choose to use the <a href="@global">global settings</a> for this theme.', array('%template' => $theme, '@global' => url('admin/appearance/settings'))) . '</p>';
    case 'admin/appearance/settings':
      return '<p>' . t('These options control the default display settings for your entire site, across all themes. Unless they have been overridden by a specific theme, these settings will be used.') . '</p>';
    case 'admin/config/modules':
      $output = '<p>' . t('Modules are plugins that extend Drupal\'s core functionality. To further extend your site\'s functionality, a number of <a href="@modules">contributed modules</a> are available for download.', array('@permissions' => url('admin/settings/permissions'), '@modules' => 'http://drupal.org/project/modules')) . '</p>';
      $output .= '<p>' . t('Module-related tasks can be located on the <a href="@by-module">administration by module page</a>. New <a href="@permissions">module-related permissions</a> may also become available as new modules are enabled.', array('@by-module' => url('admin/by-module'), '@permissions' => url('admin/settings/permissions'))) . '</p>';
      $output .= '<p>' . t('Each time a module is updated, it is important that <a href="@update-php">update.php</a> is run. To help manage the update process, the <em>Update status</em> module, if enabled, provides <a href="@updates">information on new versions of modules (and themes)</a> as they are released. Regular review of the <a href="@updates">available updates page</a> is essential to maintaining a secure and current site.', array('@update-php' => $base_url . '/update.php', '@updates' => url('admin/reports/updates'))) . '</p>';
      return $output;
    case 'admin/config/modules/uninstall':
      return '<p>' . t('The uninstall process removes all data related to a module. To uninstall a module, you must first disable it on the main <a href="@modules">modules page</a>. Not all modules support this feature.', array('@modules' => url('admin/config/modules'))) . '</p>';
    case 'admin/structure/block/configure':
      if ($arg[4] == 'system' && $arg[5] == 'powered-by') {
        return '<p>' . t('The <em>Powered by Drupal</em> block is an optional link to the home page of the Drupal project. While there is absolutely no requirement that sites feature this link, it may be used to show support for Drupal.') . '</p>';
      }
      break;
    case 'admin/config/development/maintenance':
      global $user;
      if ($user->uid == 1) {
        return '<p>' . t('If you are upgrading to a newer version of Drupal or upgrading contributed modules or themes you may need to run !update-php.', array('!update-php' => l('update.php', 'update.php'))) . '</p>';
      }
    case 'admin/settings/actions':
    case 'admin/settings/actions/manage':
      $output = '<p>' . t('Actions are individual tasks that the system can do, such as unpublishing a piece of content or banning a user. Modules, such as the trigger module, can fire these actions when certain system events happen; for example, when a new post is added or when a user logs in. Modules may also provide additional actions.') . '</p>';
      $output .= '<p>' . t('There are two types of actions: simple and advanced. Simple actions do not require any additional configuration, and are listed here automatically. Advanced actions can do more than simple actions; for example, send an e-mail to a specified address, or check for certain words within a piece of content. These actions need to be created and configured first before they may be used. To create an advanced action, select the action from the drop-down below and click the <em>Create</em> button.') . '</p>';
      if (module_exists('trigger')) {
        $output .= '<p>' . t('You may proceed to the <a href="@url">Triggers</a> page to assign these actions to system events.', array('@url' => url('admin/structure/trigger'))) . '</p>';
      }
      return $output;
    case 'admin/settings/actions/configure':
      return t('An advanced action offers additional configuration options which may be filled out below. Changing the <em>Description</em> field is recommended, in order to better identify the precise action taking place. This description will be displayed in modules such as the trigger module when assigning actions to system events, so it is best if it is as descriptive as possible (for example, "Send e-mail to Moderation Team" rather than simply "Send e-mail").');
    case 'admin/settings/ip-blocking':
      return '<p>' . t('IP addresses listed here are blocked from your site before any modules are loaded. You may add IP addresses to the list, or delete existing entries.') . '</p>';
    case 'admin/reports/status':
      return '<p>' . t("Here you can find a short overview of your site's parameters as well as any problems detected with your installation. It may be useful to copy and paste this information into support requests filed on drupal.org's support forums and project issue queues.") . '</p>';
  }
}

/**
 * Implement hook_theme().
 */
function system_theme() {
  return array_merge(drupal_common_theme(), array(
    'system_themes_form' => array(
      'arguments' => array('form' => NULL),
      'file' => 'system.admin.inc',
    ),
    'system_modules_fieldset' => array(
      'arguments' => array('form' => NULL),
      'file' => 'system.admin.inc',
    ),
    'system_modules_incompatible' => array(
      'arguments' => array('message' => NULL),
      'file' => 'system.admin.inc',
    ),
    'system_modules_uninstall' => array(
      'arguments' => array('form' => NULL),
      'file' => 'system.admin.inc',
    ),
    'status_report' => array(
      'arguments' => array('requirements' => NULL),
      'file' => 'system.admin.inc',
    ),
    'admin_page' => array(
      'arguments' => array('blocks' => NULL),
      'file' => 'system.admin.inc',
    ),
    'admin_block' => array(
      'arguments' => array('block' => NULL),
      'file' => 'system.admin.inc',
    ),
    'admin_block_content' => array(
      'arguments' => array('content' => NULL),
      'file' => 'system.admin.inc',
    ),
    'system_admin_by_module' => array(
      'arguments' => array('menu_items' => NULL),
      'file' => 'system.admin.inc',
    ),
    'system_powered_by' => array(
      'arguments' => array('image_path' => NULL),
    ),
    'meta_generator_html' => array(
      'arguments' => array('version' => NULL),
    ),
    'meta_generator_header' => array(
      'arguments' => array('version' => NULL),
    ),
    'system_compact_link' => array(),
  ));
}

/**
 * Implement hook_permission().
 */
function system_permission() {
  return array(
    'administer site configuration' => array(
      'title' => t('Administer site configuration'),
      'description' => t('Configure site-wide settings such as module or theme administration settings.'),
    ),
    'administer actions' => array(
      'title' => t('Administer actions'),
      'description' => t('Manage the actions defined for your site.'),
    ),
    'administer files' => array(
      'title' => t('Administer files'),
      'description' => t('Manage user-uploaded files.'),
    ),
    'access administration pages' => array(
      'title' => t('Access administration pages'),
      'description' => t('View the administration panel and browse the help system.'),
    ),
    'access site reports' => array(
      'title' => t('Access site reports'),
      'description' => t('View reports from system logs and other status information.'),
    ),
    'select different theme' => array(
      'title' => t('Select different theme'),
      'description' => t('Select a theme other than the default theme set by the site administrator.'),
    ),
    'block IP addresses' => array(
      'title' => t('Block IP addresses'),
      'description' => t('Block IP addresses from accessing your site.'),
    ),
  );
}

/**
 * Implement hook_rdf_namespaces().
 */
function system_rdf_namespaces() {
  return array(
    'admin'    => 'http://webns.net/mvcb/',
    'content'  => 'http://purl.org/rss/1.0/modules/content/',
    'dc'       => 'http://purl.org/dc/elements/1.1/',
    'dcterms'  => 'http://purl.org/dc/terms/',
    'foaf'     => 'http://xmlns.com/foaf/0.1/',
    'owl'      => 'http://www.w3.org/2002/07/owl#',
    'rdf'      => 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',
    'rdfs'     => 'http://www.w3.org/2000/01/rdf-schema#',
    'rss'      => 'http://purl.org/rss/1.0/',
    'sioc'     => 'http://rdfs.org/sioc/ns#',
    'xsd'      => 'http://www.w3.org/2001/XMLSchema',
  );
}

/**
 * Implement hook_elements().
 */
function system_elements() {
  // Top level form
  $type['form'] = array(
    '#method' => 'post',
    '#action' => request_uri(),
    '#theme_wrappers' => array('form'),
  );

  $type['page'] = array(
    '#show_messages' => TRUE,
    '#show_blocks' => TRUE,
    '#theme' => 'page',
  );

  $type['list'] = array(
    '#title' => '',
    '#list_type' => 'ul',
    '#attributes' => array(),
    '#items' => array(),
  );

  /**
   * Input elements.
   */
  $type['submit'] = array(
    '#input' => TRUE,
    '#name' => 'op',
    '#button_type' => 'submit',
    '#executes_submit_callback' => TRUE,
    '#process' => array('form_process_ahah'),
    '#theme_wrappers' => array('button'),
  );

  $type['button'] = array(
    '#input' => TRUE,
    '#name' => 'op',
    '#button_type' => 'submit',
    '#executes_submit_callback' => FALSE,
    '#process' => array('form_process_ahah'),
    '#theme_wrappers' => array('button'),
  );

  $type['image_button'] = array(
    '#input' => TRUE,
    '#button_type' => 'submit',
    '#executes_submit_callback' => TRUE,
    '#process' => array('form_process_ahah'),
    '#return_value' => TRUE,
    '#has_garbage_value' => TRUE,
    '#src' => NULL,
    '#theme_wrappers' => array('image_button'),
  );

  $type['textfield'] = array(
    '#input' => TRUE,
    '#size' => 60,
    '#maxlength' => 128,
    '#autocomplete_path' => FALSE,
    '#process' => array('form_process_text_format', 'form_process_ahah'),
    '#theme' => 'textfield',
    '#theme_wrappers' => array('form_element'),
  );

  $type['password'] = array(
    '#input' => TRUE,
    '#size' => 60,
    '#maxlength' => 128,
    '#process' => array('form_process_ahah'),
    '#theme' => 'password',
    '#theme_wrappers' => array('form_element'),
  );

  $type['password_confirm'] = array(
    '#input' => TRUE,
    '#process' => array('form_process_password_confirm'),
    '#theme_wrappers' => array('form_element'),
  );

  $type['textarea'] = array(
    '#input' => TRUE,
    '#cols' => 60,
    '#rows' => 5,
    '#resizable' => TRUE,
    '#process' => array('form_process_text_format', 'form_process_ahah'),
    '#theme' => 'textarea',
    '#theme_wrappers' => array('form_element'),
  );

  $type['radios'] = array(
    '#input' => TRUE,
    '#process' => array('form_process_radios'),
    '#theme_wrappers' => array('radios'),
    '#pre_render' => array('form_pre_render_conditional_form_element'),
  );

  $type['radio'] = array(
    '#input' => TRUE,
    '#default_value' => NULL,
    '#process' => array('form_process_ahah'),
    '#theme' => 'radio',
    '#theme_wrappers' => array('form_element'),
    '#form_element_skip_title' => TRUE,
  );

  $type['checkboxes'] = array(
    '#input' => TRUE,
    '#tree' => TRUE,
    '#process' => array('form_process_checkboxes'),
    '#theme_wrappers' => array('checkboxes'),
    '#pre_render' => array('form_pre_render_conditional_form_element'),
  );

  $type['checkbox'] = array(
    '#input' => TRUE,
    '#return_value' => 1,
    '#process' => array('form_process_ahah'),
    '#theme' => 'checkbox',
    '#theme_wrappers' => array('form_element'),
    '#form_element_skip_title' => TRUE,
  );

  $type['select'] = array(
    '#input' => TRUE,
    '#size' => 0,
    '#multiple' => FALSE,
    '#process' => array('form_process_ahah'),
    '#theme' => 'select',
    '#theme_wrappers' => array('form_element'),
  );

  $type['weight'] = array(
    '#input' => TRUE,
    '#delta' => 10,
    '#default_value' => 0,
    '#process' => array('form_process_weight', 'form_process_ahah'),
  );

  $type['date'] = array(
    '#input' => TRUE,
    '#element_validate' => array('date_validate'),
    '#process' => array('form_process_date'),
    '#theme' => 'date',
    '#theme_wrappers' => array('form_element'),
  );

  $type['file'] = array(
    '#input' => TRUE,
    '#size' => 60,
    '#theme' => 'file',
    '#theme_wrappers' => array('form_element'),
  );

  $type['tableselect'] = array(
    '#input' => TRUE,
    '#js_select' => TRUE,
    '#multiple' => TRUE,
    '#process' => array('form_process_tableselect'),
    '#options' => array(),
    '#empty' => '',
    '#theme' => 'tableselect'
  );

  /**
   * Form structure.
   */
  $type['item'] = array(
    '#markup' => '',
    '#theme' => 'markup',
    '#theme_wrappers' => array('form_element'),
  );

  $type['hidden'] = array(
    '#input' => TRUE,
    '#process' => array('form_process_ahah'),
    '#theme' => 'hidden',
  );

  $type['value'] = array(
    '#input' => TRUE,
  );

  $type['markup'] = array(
    '#markup' => '',
    '#theme' => 'markup',
  );

  $type['fieldset'] = array(
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
    '#value' => NULL,
    '#process' => array('form_process_fieldset', 'form_process_ahah'),
    '#pre_render' => array('form_pre_render_fieldset'),
    '#theme_wrappers' => array('fieldset'),
  );

  $type['vertical_tabs'] = array(
    '#theme_wrappers' => array('vertical_tabs'),
    '#default_tab' => '',
    '#process' => array('form_process_vertical_tabs'),
  );

  $type['token'] = array(
    '#input' => TRUE,
    '#theme' => array('hidden'),
  );

  return $type;
}

/**
 * Implement hook_menu().
 */
function system_menu() {
  $items['system/files'] = array(
    'title' => 'File download',
    'page callback' => 'file_download',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['system/ahah'] = array(
    'title' => 'AHAH callback',
    'page callback' => 'form_ahah_callback',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['system/timezone'] = array(
    'title' => 'Time zone',
    'page callback' => 'system_timezone',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['admin'] = array(
    'title' => 'Administer',
    'access arguments' => array('access administration pages'),
    'page callback' => 'system_main_admin_page',
    'weight' => 9,
    'menu_name' => 'management',
  );
  $items['admin/compact'] = array(
    'title' => 'Compact mode',
    'page callback' => 'system_admin_compact_page',
    'access arguments' => array('access administration pages'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/by-task'] = array(
    'title' => 'By task',
    'page callback' => 'system_main_admin_page',
    'access arguments' => array('access administration pages'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/by-module'] = array(
    'title' => 'By module',
    'page callback' => 'system_admin_by_module',
    'access arguments' => array('access administration pages'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
  );

  // Menu items that are basically just menu blocks.
  $items['admin/settings'] = array(
    'title' => 'Site configuration',
    'description' => 'Configure site settings.',
    'position' => 'right',
    'weight' => -2,
    'page callback' => 'system_settings_overview',
    'access callback' => 'system_admin_menu_block_access',
    'access arguments' => array('admin/settings', 'access administration pages'),
  );
  $items['admin/structure'] = array(
    'title' => 'Structure',
    'description' => 'Control how your site looks and feels.',
    'position' => 'right',
    'weight' => -8,
    'page callback' => 'system_admin_menu_block_page',
    'access callback' => 'system_admin_menu_block_access',
    'access arguments' => array('admin/structure', 'access administration pages'),
  );
  // Appearance.
  $items['admin/appearance'] = array(
    'title' => 'Appearance',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('system_themes_form'),
    'access arguments' => array('administer site configuration'),
    'weight' => -6,
  );
  $items['admin/appearance/select'] = array(
    'title' => 'List',
    'description' => 'Select the default theme for your site.',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -1,
  );
  $items['admin/appearance/settings'] = array(
    'title' => 'Configure',
    'page arguments' => array('system_theme_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
  );
  // Theme configuration subtabs.
  $items['admin/appearance/settings/global'] = array(
    'title' => 'Global settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -1,
  );

  foreach (list_themes() as $theme) {
    $items['admin/appearance/settings/' . $theme->name] = array(
      'title' => $theme->info['name'],
      'page arguments' => array('system_theme_settings', $theme->name),
      'type' => MENU_LOCAL_TASK,
      'access callback' => '_system_themes_access',
      'access arguments' => array($theme),
    );
  }

  // Configuration and modules.
  $items['admin/config'] = array(
    'title' => 'Configuration and modules',
    'page callback' => 'system_admin_config_page',
    'access arguments' => array('access administration pages'),
  );
  $items['admin/config/config'] = array(
    'title' => 'Configuration',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['admin/config/modules'] = array(
    'title' => 'Modules',
    'description' => 'Enable or disable add-on modules for your site.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('system_modules'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
  );
  $items['admin/config/modules/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/config/modules/list/confirm'] = array(
    'title' => 'List',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/config/modules/uninstall'] = array(
    'title' => 'Uninstall',
    'page arguments' => array('system_modules_uninstall'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/config/modules/uninstall/confirm'] = array(
    'title' => 'Uninstall',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
  );

  // Actions.
  $items['admin/settings/actions'] = array(
    'title' => 'Actions',
    'description' => 'Manage the actions defined for your site.',
    'access arguments' => array('administer actions'),
    'page callback' => 'system_actions_manage'
  );
  $items['admin/settings/actions/manage'] = array(
    'title' => 'Manage actions',
    'description' => 'Manage the actions defined for your site.',
    'page callback' => 'system_actions_manage',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -2,
  );
  $items['admin/settings/actions/configure'] = array(
    'title' => 'Configure an advanced action',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('system_actions_configure'),
    'access arguments' => array('administer actions'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/settings/actions/delete/%actions'] = array(
    'title' => 'Delete action',
    'description' => 'Delete an action.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('system_actions_delete_form', 4),
    'access arguments' => array('administer actions'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/settings/actions/orphan'] = array(
    'title' => 'Remove orphans',
    'page callback' => 'system_actions_remove_orphans',
    'access arguments' => array('administer actions'),
    'type' => MENU_CALLBACK,
  );

  // IP address blocking.
  $items['admin/settings/ip-blocking'] = array(
    'title' => 'IP address blocking',
    'description' => 'Manage blocked IP addresses.',
    'page callback' => 'system_ip_blocking',
    'access arguments' => array('block IP addresses'),
  );
  $items['admin/settings/ip-blocking/%'] = array(
    'title' => 'IP address blocking',
    'description' => 'Manage blocked IP addresses.',
    'page callback' => 'system_ip_blocking',
    'access arguments' => array('block IP addresses'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/settings/ip-blocking/delete/%blocked_ip'] = array(
    'title' => 'Delete IP address',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('system_ip_blocking_delete', 4),
    'access arguments' => array('block IP addresses'),
    'type' => MENU_CALLBACK,
  );

  // Configuration.
  $items['admin/config/development'] = array(
   'title' => 'Development',
   'description' => 'Development tools.',
   'position' => 'left',
   'weight' => 10,
   'page callback' => 'system_admin_menu_block_page',
   'access callback' => 'system_admin_menu_block_access',
   'access arguments' => array('admin/config/development', 'access administration pages'),
  );
  $items['admin/config/development/maintenance'] = array(
    'title' => 'Maintenance mode',
    'description' => 'Take the site offline for maintenance or bring it back online.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('system_site_maintenance_mode'),
    'access arguments' => array('administer site configuration'),
  );
  $items['admin/config/development/performance'] = array(
    'title' => 'Performance',
    'description' => 'Enable or disable page caching for anonymous users and set CSS and JS bandwidth optimization options.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('system_performance_settings'),
    'access arguments' => array('administer site configuration'),
  );

  // Settings.
  $items['admin/settings/site-information'] = array(
    'title' => 'Site information',
    'description' => 'Change basic site information, such as the site name, slogan, e-mail address, mission, front page and more.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('system_site_information_settings'),
    'access arguments' => array('administer site configuration'),
  );
  $items['admin/config/development/logging'] = array(
    'title' => 'Logging and errors',
    'description' => "Settings for logging and alerts modules. Various modules can route Drupal's system events to different destinations, such as syslog, database, email, etc.",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('system_logging_settings'),
    'access arguments' => array('administer site configuration'),
  );
  $items['admin/settings/file-system'] = array(
    'title' => 'File system',
    'description' => 'Tell Drupal where to store uploaded files and how they are accessed.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('system_file_system_settings'),
    'access arguments' => array('administer site configuration'),
  );
  $items['admin/settings/image-toolkit'] = array(
    'title' => 'Image toolkit',
    'description' => 'Choose which image toolkit to use if you have installed optional toolkits.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('system_image_toolkit_settings'),
    'access arguments' => array('administer site configuration'),
  );
  $items['admin/settings/rss-publishing'] = array(
    'title' => 'RSS publishing',
    'description' => 'Configure the site description, the number of items per feed and whether feeds should be titles/teasers/full-text.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('system_rss_feeds_settings'),
    'access arguments' => array('administer site configuration'),
  );
  $items['admin/settings/regional-settings'] = array(
    'title' => 'Regional settings',
    'description' => "Settings for how Drupal displays date and time, as well as the system's default time zone.",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('system_regional_settings'),
    'access arguments' => array('administer site configuration'),
  );
  $items['admin/settings/regional-settings/lookup'] = array(
    'title' => 'Date and time lookup',
    'type' => MENU_CALLBACK,
    'page callback' => 'system_date_time_lookup',
    'access arguments' => array('administer site configuration'),
  );
  $items['admin/settings/clean-urls'] = array(
    'title' => 'Clean URLs',
    'description' => 'Enable or disable clean URLs for your site.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('system_clean_url_settings'),
    'access arguments' => array('administer site configuration'),
  );
  $items['admin/settings/clean-urls/check'] = array(
    'title' => 'Clean URL check',
    'page callback' => 'drupal_json',
    'page arguments' => array(array('status' => TRUE)),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  // Reports.
  $items['admin/reports'] = array(
    'title' => 'Reports',
    'description' => 'View reports from system logs and other status information.',
    'page callback' => 'system_admin_menu_block_page',
    'access callback' => 'system_admin_menu_block_access',
    'access arguments' => array('admin/reports', 'access site reports'),
    'weight' => 5,
    'position' => 'left',
  );
  $items['admin/reports/status'] = array(
    'title' => 'Status report',
    'description' => "Get a status report about your site's operation and any detected problems.",
    'page callback' => 'system_status',
    'weight' => 10,
    'access arguments' => array('administer site configuration'),
  );
  $items['admin/reports/status/run-cron'] = array(
    'title' => 'Run cron',
    'page callback' => 'system_run_cron',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/reports/status/php'] = array(
    'title' => 'PHP',
    'page callback' => 'system_php',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
  );
  // Default page for batch operations.
  $items['batch'] = array(
    'page callback' => 'system_batch_page',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implementation of hook_library().
 */
function system_library() {
  // jQuery.
  $libraries['jquery'] = array(
    'title' => 'jQuery',
    'website' => 'http://jquery.com',
    'version' => '1.3.2',
    'js' => array(
      'misc/jquery.js' => array('weight' => JS_LIBRARY - 20),
    ),
  );

  // jQuery Form Plugin.
  $libraries['form'] = array(
    'title' => 'jQuery Form Plugin',
    'website' => 'http://malsup.com/jquery/form/',
    'version' => '2.16',
    'js' => array(
      'misc/jquery.form.js' => array(),
    ),
  );

  // Farbtastic.
  $libraries['farbtastic'] = array(
    'title' => 'Farbtastic',
    'website' => 'http://code.google.com/p/farbtastic/',
    'version' => '1.2',
    'js' => array(
      'misc/farbtastic/farbtastic.js' => array(),
    ),
    'css' => array(
      'misc/farbtastic/farbtastic.css' => array('preprocess' => FALSE),
    ),
  );

  // Cookie.
  $libraries['cookie'] = array(
    'title' => 'Cookie',
    'website' => 'http://plugins.jquery.com/project/cookie',
    'version' => '1.0',
    'js' => array(
      'misc/jquery.cookie.js' => array(),
    ),
  );

  // jQuery UI.
  $libraries['ui'] = array(
    'title' => 'jQuery UI: Core',
    'website' => 'http://jqueryui.com',
    'version' => '1.7.2',
    'js' => array(
      'misc/ui/ui.core.js' => array('weight' => JS_LIBRARY - 10),
    ),
    'css' => array(
      'misc/ui/ui.core.css' => array(),
      'misc/ui/ui.theme.css' => array(),
    ),
  );
  $libraries['ui.accordion'] = array(
    'title' => 'jQuery UI: Accordion',
    'website' => 'http://jqueryui.com/demos/accordion/',
    'version' => '1.7.2',
    'js' => array(
      'misc/ui/ui.accordion.js' => array(),
    ),
    'css' => array(
      'misc/ui/ui.accordion.css' => array(),
    ),
    'dependencies' => array(
      array('system', 'ui'),
    ),
  );
  $libraries['ui.datepicker'] = array(
    'title' => 'jQuery UI: Date Picker',
    'website' => 'http://jqueryui.com/demos/datepicker/',
    'version' => '1.7.2',
    'js' => array(
      'misc/ui/ui.datepicker.js' => array(),
    ),
    'css' => array(
      'misc/ui/ui.datepicker.css' => array(),
    ),
    'dependencies' => array(
      array('system', 'ui'),
    ),
  );
  $libraries['ui.dialog'] = array(
    'title' => 'jQuery UI: Dialog',
    'website' => 'http://jqueryui.com/demos/dialog/',
    'version' => '1.7.2',
    'js' => array(
      'misc/ui/ui.dialog.js' => array(),
    ),
    'css' => array(
      'misc/ui/ui.dialog.css' => array(),
    ),
    'dependencies' => array(
      array('system', 'ui'),
    ),
  );
  $libraries['ui.draggable'] = array(
    'title' => 'jQuery UI: Dialog',
    'website' => 'http://jqueryui.com/demos/draggable/',
    'version' => '1.7.2',
    'js' => array(
      'misc/ui/ui.draggable.js' => array(),
    ),
    'dependencies' => array(
      array('system', 'ui'),
    ),
  );
  $libraries['ui.droppable'] = array(
    'title' => 'jQuery UI: Droppable',
    'website' => 'http://jqueryui.com/demos/droppable/',
    'version' => '1.7.2',
    'js' => array(
      'misc/ui/ui.droppable.js' => array(),
    ),
    'dependencies' => array(
      array('system', 'ui'),
      array('system', 'ui.draggable'),
    ),
  );
  $libraries['ui.progressbar'] = array(
    'title' => 'jQuery UI: Progress Bar',
    'website' => 'http://jqueryui.com/demos/progressbar/',
    'version' => '1.7.2',
    'js' => array(
      'misc/ui/ui.progressbar.js' => array(),
    ),
    'css' => array(
      'misc/ui/ui.progressbar.css' => array(),
    ),
    'dependencies' => array(
      array('system', 'ui'),
    ),
  );
  $libraries['ui.resizable'] = array(
    'title' => 'jQuery UI: Resizable',
    'website' => 'http://jqueryui.com/demos/resizable/',
    'version' => '1.7.2',
    'js' => array(
      'misc/ui/ui.resizable.js' => array(),
    ),
    'css' => array(
      'misc/ui/ui.resizable.css' => array(),
    ),
    'dependencies' => array(
      array('system', 'ui'),
    ),
  );
  $libraries['ui.selectable'] = array(
    'title' => 'jQuery UI: Selectable',
    'website' => 'http://jqueryui.com/demos/selectable/',
    'version' => '1.7.2',
    'js' => array(
      'misc/ui/ui.selectable.js' => array(),
    ),
    'css' => array(
      'misc/ui/ui.selectable.css' => array(),
    ),
    'dependencies' => array(
      array('system', 'ui'),
    ),
  );
  $libraries['ui.slider'] = array(
    'title' => 'jQuery UI: Slider',
    'website' => 'http://jqueryui.com/demos/slider/',
    'version' => '1.7.2',
    'js' => array(
      'misc/ui/ui.slider.js' => array(),
    ),
    'css' => array(
      'misc/ui/ui.slider.css' => array(),
    ),
    'dependencies' => array(
      array('system', 'ui'),
    ),
  );
  $libraries['ui.sortable'] = array(
    'title' => 'jQuery UI: Sortable',
    'website' => 'http://jqueryui.com/demos/sortable/',
    'version' => '1.7.2',
    'js' => array(
      'misc/ui/ui.sortable.js' => array(),
    ),
    'dependencies' => array(
      array('system', 'ui'),
    ),
  );
  $libraries['ui.tabs'] = array(
    'title' => 'jQuery UI: Tabs',
    'website' => 'http://jqueryui.com/demos/tabs/',
    'version' => '1.7.2',
    'js' => array(
      'misc/ui/ui.tabs.js' => array(),
    ),
    'css' => array(
      'misc/ui/ui.tabs.css' => array(),
    ),
    'dependencies' => array(
      array('system', 'ui'),
    ),
  );
  $libraries['effects'] = array(
    'title' => 'jQuery UI: Effects',
    'website' => 'http://jqueryui.com/demos/effect/',
    'version' => '1.7.2',
    'js' => array(
      'misc/ui/effects.core.js' => array('weight' => JS_LIBRARY - 9),
    ),
    'dependencies' => array(
      array('system', 'ui'),
    ),
  );
  $libraries['effects.blind'] = array(
    'title' => 'jQuery UI: Effects Blind',
    'website' => 'http://jqueryui.com/demos/effect/',
    'version' => '1.7.2',
    'js' => array(
      'misc/ui/effects.blind.js' => array(),
    ),
    'dependencies' => array(
      array('system', 'effects'),
    ),
  );
  $libraries['effects.bounce'] = array(
    'title' => 'jQuery UI: Effects Bounce',
    'website' => 'http://jqueryui.com/demos/effect/',
    'version' => '1.7.2',
    'js' => array(
      'misc/ui/effects.bounce.js' => array(),
    ),
    'dependencies' => array(
      array('system', 'effects'),
    ),
  );
  $libraries['effects.clip'] = array(
    'title' => 'jQuery UI: Effects Clip',
    'website' => 'http://jqueryui.com/demos/effect/',
    'version' => '1.7.2',
    'js' => array(
      'misc/ui/effects.clip.js' => array(),
    ),
    'dependencies' => array(
      array('system', 'effects'),
    ),
  );
  $libraries['effects.drop'] = array(
    'title' => 'jQuery UI: Effects Drop',
    'website' => 'http://jqueryui.com/demos/effect/',
    'version' => '1.7.2',
    'js' => array(
      'misc/ui/effects.drop.js' => array(),
    ),
    'dependencies' => array(
      array('system', 'effects'),
    ),
  );
  $libraries['effects.explode'] = array(
    'title' => 'jQuery UI: Effects Explode',
    'website' => 'http://jqueryui.com/demos/effect/',
    'version' => '1.7.2',
    'js' => array(
      'misc/ui/effects.explode.js' => array(),
    ),
    'dependencies' => array(
      array('system', 'effects'),
    ),
  );
  $libraries['effects.fold'] = array(
    'title' => 'jQuery UI: Effects Fold',
    'website' => 'http://jqueryui.com/demos/effect/',
    'version' => '1.7.2',
    'js' => array(
      'misc/ui/effects.fold.js' => array(),
    ),
    'dependencies' => array(
      array('system', 'effects'),
    ),
  );
  $libraries['effects.highlight'] = array(
    'title' => 'jQuery UI: Effects Fold',
    'website' => 'http://jqueryui.com/demos/effect/',
    'version' => '1.7.2',
    'js' => array(
      'misc/ui/effects.highlight.js' => array(),
    ),
    'dependencies' => array(
      array('system', 'effects'),
    ),
  );
  $libraries['effects.pulsate'] = array(
    'title' => 'jQuery UI: Effects Pulsate',
    'website' => 'http://jqueryui.com/demos/effect/',
    'version' => '1.7.2',
    'js' => array(
      'misc/ui/effects.pulsate.js' => array(),
    ),
    'dependencies' => array(
      array('system', 'effects'),
    ),
  );
  $libraries['effects.scale'] = array(
    'title' => 'jQuery UI: Effects Pulsate',
    'website' => 'http://jqueryui.com/demos/effect/',
    'version' => '1.7.2',
    'js' => array(
      'misc/ui/effects.scale.js' => array(),
    ),
    'dependencies' => array(
      array('system', 'effects'),
    ),
  );
  $libraries['effects.shake'] = array(
    'title' => 'jQuery UI: Effects Shake',
    'website' => 'http://jqueryui.com/demos/effect/',
    'version' => '1.7.2',
    'js' => array(
      'misc/ui/effects.scale.js' => array(),
    ),
    'dependencies' => array(
      array('system', 'effects'),
    ),
  );
  $libraries['effects.slide'] = array(
    'title' => 'jQuery UI: Effects Slide',
    'website' => 'http://jqueryui.com/demos/effect/',
    'version' => '1.7.2',
    'js' => array(
      'misc/ui/effects.slide.js' => array(),
    ),
    'dependencies' => array(
      array('system', 'effects'),
    ),
  );
  $libraries['effects.transfer'] = array(
    'title' => 'jQuery UI: Effects Transfer',
    'website' => 'http://jqueryui.com/demos/effect/',
    'version' => '1.7.2',
    'js' => array(
      'misc/ui/effects.transfer.js' => array(),
    ),
    'dependencies' => array(
      array('system', 'effects'),
    ),
  );

  return $libraries;
}

/**
 * Implement hook_stream_wrappers().
 */
function system_stream_wrappers() {
  return array(
    'public' => array(
      'name' => t('Public files'),
      'class' => 'DrupalPublicStreamWrapper',
      'description' => t('Public local files served by the webserver.'),
    ),
    'private' => array(
      'name' => t('Private files'),
      'class' => 'DrupalPrivateStreamWrapper',
      'description' => t('Private local files served by Drupal.'),
    ),
    'temporary' => array(
      'name' => t('Temporary files'),
      'class' => 'DrupalTemporaryStreamWrapper',
      'description' => t('Temporary local files for upload and previews.'),
    )
  );
}

/**
 * Retrieve a blocked IP address from the database.
 *
 * @param $iid integer
 *   The ID of the blocked IP address to retrieve.
 *
 * @return
 *   The blocked IP address from the database as an array.
 */
function blocked_ip_load($iid) {
  return db_query("SELECT * FROM {blocked_ips} WHERE iid = :iid", array(':iid' => $iid))->fetchAssoc();
}

/**
 * Menu item access callback - only admin or enabled themes can be accessed.
 */
function _system_themes_access($theme) {
  return user_access('administer site configuration') && ($theme->status || $theme->name == variable_get('admin_theme', 0));
}

/**
 * Menu item access callback - hides empty system settings overview pages.
 *
 * @param $path
 *   The path of the menu item to check for child menu entries.
 * @param $string
 *   The permission, such as "administer nodes", being checked for.
 * @return
 *   Boolean TRUE if the current user has the requested permission and the
 *   current menu item has children.
 */
function system_admin_menu_block_access($path, $permission) {
  if (!user_access($permission)) {
    return FALSE;
  }
  $content = system_admin_menu_block(array('path' => $path));
  return !empty($content);
}

/**
 * Implement hook_filetransfer_backends().
 */
function system_filetransfer_backends() {
  $backends = array();

  //This is the default, will be available on most systems
  if (function_exists('ftp_connect')) {
    $backends['ftp_extension'] = array(
      'title' => t('FTP'),
      'class' => 'FileTransferFTPExtension',
      'settings_form' => 'system_filetransfer_backend_form_ftp',
      'weight' => 0,
    );
  }
  
  if (ini_get('allow_url_fopen')) {
    $backends['ftp_wrapper'] = array(
      'title' => t('FTP using file streams'),
      'class' => 'FileTransferFTPWrapper',
      'settings_form' => 'system_filetransfer_backend_form_ftp',
      'weight' => 10,
    );
  }
  
  // SSH2 lib connection is only available if the proper PHP extension is
  // installed.
  if (function_exists('ssh2_connect')) {
    $backends['ssh'] = array(
      'title' => t('SSH'),
      'class' => 'FileTransferSSH',
      'settings_form' => 'system_filetransfer_backend_form_ssh',
      'weight' => 20,
    );
  }
  return $backends;
}

/**
 *  Helper function to return a form for configuring a filetransfer backend.
 *
 * @param string $filetransfer_backend_name
 *   The name of the backend to return a form for.
 *
 * @param string $defaults
 *   An associative array of settings to pre-populate the form with.
 */
function system_get_filetransfer_settings_form($filetransfer_backend_name, $defaults) {
  $available_backends = module_invoke_all('filetransfer_backends');
  $form = call_user_func($available_backends[$filetransfer_backend_name]['settings_form']);
  
  foreach ($form as $name => &$element) {
    if (isset($defaults[$name])) {
      $element['#default_value'] = $defaults[$name];
    }
  }
  return $form;
}

/**
 * Returns the form to configure the filetransfer class for FTP
 */
function system_filetransfer_backend_form_ftp() {
  $form = _system_filetransfer_backend_form_common();
  $form['port']['#default_value'] = 21;
  return $form;
}

/**
 * Returns the form to configure the filetransfer class for SSH
 */
function system_filetransfer_backend_form_ssh() {
  $form = _system_filetransfer_backend_form_common();
  $form['port']['#default_value'] = 22;
  return $form;
}

/**
 * Helper function because SSH and FTP backends share the same elements
 */
function _system_filetransfer_backend_form_common() {
  $form = array();
  
  $form['hostname'] = array (
    '#type' => 'textfield',
    '#title' => t('Host'),
    '#default_value' => 'localhost',
  );
  
  $form['port'] = array (
    '#type' => 'textfield',
    '#title' => t('Port'),
    '#default_value' => NULL,
  );
  
  $form['username'] = array (
    '#type' => 'textfield',
    '#title' => t('Username'),
  );
  
  $form['password'] = array (
    '#type' => 'password',
    '#title' => t('Password'),
    '#description' => t('This is not saved in the database and is only used to test the connection'),
  );
  
  return $form;
}

/**
 * Implement hook_init().
 */
function system_init() {
  // Use the administrative theme if the user is looking at a page in the admin/* path.
  if (arg(0) == 'admin' || (variable_get('node_admin_theme', '0') && arg(0) == 'node' && (arg(1) == 'add' || arg(2) == 'edit'))) {
    global $custom_theme;
    $custom_theme = variable_get('admin_theme', 0);
    drupal_add_css(drupal_get_path('module', 'system') . '/admin.css', array('weight' => CSS_SYSTEM));
  }

  // Add the CSS for this module.
  drupal_add_css(drupal_get_path('module', 'system') . '/defaults.css', array('weight' => CSS_SYSTEM));
  drupal_add_css(drupal_get_path('module', 'system') . '/system.css', array('weight' => CSS_SYSTEM));
  drupal_add_css(drupal_get_path('module', 'system') . '/system-menus.css', array('weight' => CSS_SYSTEM));


  // Ignore slave database servers for this request.
  //
  // In Drupal's distributed database structure, new data is written to the master
  // and then propagated to the slave servers.  This means there is a lag
  // between when data is written to the master and when it is available on the slave.
  // At these times, we will want to avoid using a slave server temporarily.
  // For example, if a user posts a new node then we want to disable the slave
  // server for that user temporarily to allow the slave server to catch up.
  // That way, that user will see their changes immediately while for other
  // users we still get the benefits of having a slave server, just with slightly
  // stale data.  Code that wants to disable the slave server should use the
  // db_set_ignore_slave() function to set $_SESSION['ignore_slave_server'] to
  // the timestamp after which the slave can be re-enabled.
  if (isset($_SESSION['ignore_slave_server'])) {
    if ($_SESSION['ignore_slave_server'] >= REQUEST_TIME) {
      Database::ignoreTarget('default', 'slave');
    }
    else {
      unset($_SESSION['ignore_slave_server']);
    }
  }
}

/**
 * Implement MODULE_preprocess_HOOK().
 */
function system_preprocess_page(&$variables) {
  // Get the major version
  list($version, ) = explode('.', VERSION);

  // Emit the META tag in the HTML HEAD section
  theme('meta_generator_html', $version);

  // Emit the HTTP Header too
  theme('meta_generator_header', $version);

  $variables['head'] = drupal_get_html_head();
}

/**
 * Implement hook_user_form().
 */
function system_user_form(&$edit, $account, $category) {
  if ($category == 'account') {
    if (variable_get('configurable_timezones', 1)) {
      system_user_timezone($edit, $form);
    }
    return $form;
  }
}

/**
 * Implement hook_user_register().
 */
function system_user_register(&$edit, $account, $category) {
  if (variable_get('configurable_timezones', 1)) {
    $form = array();
    if (variable_get('user_default_timezone', DRUPAL_USER_TIMEZONE_DEFAULT) == DRUPAL_USER_TIMEZONE_SELECT) {
      system_user_timezone($edit, $form);
    }
    else {
      $form['account']['timezone'] = array(
        '#type' => 'hidden',
        '#value' => variable_get('user_default_timezone', DRUPAL_USER_TIMEZONE_DEFAULT) ? '' : variable_get('date_default_timezone', ''),
      );
    }
    return $form;
  }
}

/**
 * Implement hook_user_login().
 */
function system_user_login(&$edit, $account) {
  // If the user has a NULL time zone, notify them to set a time zone.
  if (!$account->timezone && variable_get('configurable_timezones', 1) && variable_get('empty_timezone_message', 0)) {
    drupal_set_message(t('Please configure your <a href="@user-edit">account time zone setting</a>.', array('@user-edit' => url("user/$account->uid/edit", array('query' => drupal_get_destination(), 'fragment' => 'edit-timezone')))));
  }
}

/**
 * Add the time zone field to the user edit and register forms.
 */
function system_user_timezone(&$edit, &$form) {
  global $user;
  $form['timezone'] = array(
    '#type' => 'fieldset',
    '#title' => t('Locale settings'),
    '#weight' => 6,
    '#collapsible' => TRUE,
  );
  $form['timezone']['timezone'] = array(
    '#type' => 'select',
    '#title' => t('Time zone'),
    '#default_value' => $edit['timezone'] ? $edit['timezone'] : ($edit['uid'] == $user->uid ? variable_get('date_default_timezone', '') : ''),
    '#options' => system_time_zones(($edit['uid'] != $user->uid)),
    '#description' => t('Select the desired local time and time zone. Dates and times throughout this site will be displayed using this time zone.'),
  );
  if (!$edit['timezone'] && $edit['uid'] == $user->uid) {
    $form['timezone']['#description'] = t('Your time zone setting will be automatically detected if possible. Please confirm the selection and click save.');
    $form['timezone']['timezone']['#attributes'] = array('class' => 'timezone-detect');
    drupal_add_js('misc/timezone.js');
  }
}

/**
 * Implement hook_block_list().
 */
function system_block_list() {
  $blocks['main'] = array(
    'info' => t('Main page content'),
     // Cached elsewhere.
    'cache' => BLOCK_NO_CACHE,
  );
  $blocks['powered-by'] = array(
    'info' => t('Powered by Drupal'),
    'weight' => '10',
    'cache' => BLOCK_NO_CACHE,
  );
  $blocks['help'] = array(
    'info' => t('System help'),
    'weight' => '5',
  );
  // System-defined menu blocks.
  foreach (menu_list_system_menus() as $menu_name => $title) {
    $blocks[$menu_name]['info'] = t($title);
    // Menu blocks can't be cached because each menu item can have
    // a custom access callback. menu.inc manages its own caching.
    $blocks[$menu_name]['cache'] = BLOCK_NO_CACHE;
  }
  return $blocks;
}

/**
 * Implement hook_block_configure().
 */
function system_block_configure($delta = '') {
  if ($delta == 'powered-by') {
    $image_path = 'misc/' . variable_get('drupal_badge_color', 'powered-blue') . '-' . variable_get('drupal_badge_size', '80x15') . '.png';
    drupal_add_js(drupal_get_path('module', 'system') . '/system.js');
    // Compile a list of fields to show
    $form['wrapper']['color'] = array(
      '#type' => 'select',
      '#title' => t('Badge color'),
      '#default_value' => variable_get('drupal_badge_color', 'powered-blue'),
      '#options' => array('powered-black' => t('Black'), 'powered-blue' => t('Blue'), 'powered-gray' => t('Gray')),
    );
    $form['wrapper']['size'] = array(
      '#type' => 'select',
      '#title' => t('Badge size'),
      '#default_value' => variable_get('drupal_badge_size', '80x15'),
      '#options' => array('80x15' => t('Small'), '88x31' => t('Medium'), '135x42' => t('Large')),
    );
    $form['wrapper']['preview'] = array(
      '#type' => 'item',
      '#title' => 'Preview',
      '#markup' => theme('image', $image_path, t('Powered by Drupal, an open source content management system'), t('Powered by Drupal, an open source content management system'), array('class' => 'powered-by-preview'), FALSE),
    );
    return $form;
  }
}

/**
 * Implement hook_block_save().
 */
function system_block_save($delta = '', $edit = NULL) {
  if ($delta == 'powered-by') {
    $image_path = 'misc/' . variable_get('drupal_badge_color', 'powered-blue') . '-' . variable_get('drupal_badge_size', '80x15') . '.png';
    variable_set('drupal_badge_color', $edit['color']);
    variable_set('drupal_badge_size', $edit['size']);
  }
}

/**
 * Implement hook_block_view().
 *
 * Generate a block with a promotional link to Drupal.org and
 * all system menu blocks.
 */
function system_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'main':
      $block['subject'] = NULL;
      $block['content'] = drupal_set_page_content();
      return $block;
    case 'powered-by':
      $image_path = 'misc/' . variable_get('drupal_badge_color', 'powered-blue') . '-' . variable_get('drupal_badge_size', '80x15') . '.png';
      $block['subject'] = NULL;
      $block['content'] = theme('system_powered_by', $image_path);
      return $block;
    case 'help':
      $block['subject'] = NULL;
      $block['content'] = menu_get_active_help();
      return $block;
    default:
      // All system menu blocks.
      $system_menus = menu_list_system_menus();
      if (isset($system_menus[$delta])) {
        $block['subject'] = t($system_menus[$delta]);
        $block['content'] = menu_tree($delta);
        return $block;
      }
      break;
  }
}

/**
 * Provide a single block on the administration overview page.
 *
 * @param $item
 *   The menu item to be displayed.
 */
function system_admin_menu_block($item) {
  $cache = &drupal_static(__FUNCTION__, array());
  if (!isset($item['mlid'])) {
    $item += db_query("SELECT mlid, menu_name FROM {menu_links} ml WHERE ml.router_path = :path AND module = 'system'", array(':path' => $item['path']))->fetchAssoc();
  }

  if (isset($cache[$item['mlid']])) {
    return $cache[$item['mlid']];
  }

  $content = array();
  $result = db_query("
    SELECT m.load_functions, m.to_arg_functions, m.access_callback, m.access_arguments, m.page_callback, m.page_arguments, m.title, m.title_callback, m.title_arguments, m.type, m.description, ml.*
    FROM {menu_links} ml
    LEFT JOIN {menu_router} m ON ml.router_path = m.path
    WHERE ml.plid = :plid AND ml.menu_name = :name AND hidden = 0", array(':plid' => $item['mlid'], ':name' => $item['menu_name']), array('fetch' => PDO::FETCH_ASSOC));
  foreach ($result as $link) {
    _menu_link_translate($link);
    if (!$link['access']) {
      continue;
    }
    // The link 'description' either derived from the hook_menu 'description' or
    // entered by the user via menu module is saved as the title attribute.
    if (!empty($link['localized_options']['attributes']['title'])) {
      $link['description'] = $link['localized_options']['attributes']['title'];
    }
    // Prepare for sorting as in function _menu_tree_check_access().
    // The weight is offset so it is always positive, with a uniform 5-digits.
    $content[(50000 + $link['weight']) . ' ' . drupal_strtolower($link['title']) . ' ' . $link['mlid']] = $link;
  }
  ksort($content);
  $cache[$item['mlid']] = $content;
  return $content;
}

/**
 * Checks the existence of the directory specified in $form_element. This
 * function is called from the system_settings form to check both the
 * file_directory_path and file_directory_temp directories. If validation
 * fails, the form element is flagged with an error from within the
 * file_check_directory function.
 *
 * @param $form_element
 *   The form element containing the name of the directory to check.
 */
function system_check_directory($form_element) {
  file_check_directory($form_element['#value'], FILE_CREATE_DIRECTORY, $form_element['#parents'][0]);
  return $form_element;
}

/**
 * Retrieves the current status of an array of files in the system table.
 *
 * @param $files
 *   An array of files to check.
 * @param $type
 *   The type of the files.
 */
function system_get_files_database(&$files, $type) {
  // Extract current files from database.
  $result = db_query("SELECT filename, name, type, status, schema_version, weight FROM {system} WHERE type = :type", array(':type' => $type));
  foreach ($result as $file) {
    if (isset($files[$file->name]) && is_object($files[$file->name])) {
      $file->filepath = $file->filename;
      foreach ($file as $key => $value) {
        if (!isset($files[$file->name]->key)) {
          $files[$file->name]->$key = $value;
        }
      }
    }
  }
}

/**
 * Updates the records in the system table based on the files array.
 *
 * @param $files
 *   An array of files.
 * @param $type
 *   The type of the files.
 */
function system_update_files_database(&$files, $type) {
  $result = db_query("SELECT * FROM {system} WHERE type = :type", array(':type' => $type));

  // Add all files that need to be deleted to a DatabaseCondition.
  $delete = db_or();
  foreach ($result as $file) {
    if (isset($files[$file->name]) && is_object($files[$file->name])) {
      // Keep the old filename from the database in case the file has moved.
      $old_filename = $file->filename;

      $updated_fields = array();

      // Handle info specially, compare the serialized value.
      $serialized_info = serialize($files[$file->name]->info);
      if ($serialized_info != $file->info) {
        $updated_fields['info'] = $serialized_info;
      }
      unset($file->info);

      // Scan remaining fields to find only the updated values.
      foreach ($file as $key => $value) {
        if (isset($files[$file->name]->$key) && $files[$file->name]->$key != $value) {
          $updated_fields[$key] = $files[$file->name]->$key;
        }
      }

      // Update the record.
      if (count($updated_fields)) {
        db_update('system')
          ->fields($updated_fields)
          ->condition('filename', $old_filename)
          ->execute();
      }

      // Indiciate that the file exists already.
      $files[$file->name]->exists = TRUE;
    }
    else {
      // File is not found in file system, so delete record from the system table.
      $delete->condition('filename', $file->filename);
    }
  }

  if (count($delete) > 0) {
    // Delete all missing files from the system table
    db_delete('system')
      ->condition($delete)
      ->execute();
  }

  // All remaining files are not in the system table, so we need to add them.
  $query = db_insert('system')->fields(array('filename', 'name', 'type', 'owner', 'info'));
  foreach($files as &$file) {
    if (isset($file->exists)) {
      unset($file->exists);
    }
    else {
      $query->values(array(
        'filename' => $file->filepath,
        'name' => $file->name,
        'type' => $type,
        'owner' => isset($file->owner) ? $file->owner : '',
        'info' => serialize($file->info),
      ));
      $file->type = $type;
      $file->status = 0;
      $file->schema_version = -1;
    }
  }
  $query->execute();
}

/**
 * Helper function to scan and collect module .info data.
 *
 * @return
 *   An associative array of module information.
 */
function _system_get_module_data() {
  // Find modules
  $modules = drupal_system_listing('/\.module$/', 'modules', 'name', 0);

  // Set defaults for module info.
  $defaults = array(
    'dependencies' => array(),
    'dependents' => array(),
    'description' => '',
    'package' => 'Other',
    'version' => NULL,
    'php' => DRUPAL_MINIMUM_PHP,
    'files' => array(),
  );

  // Read info files for each module.
  foreach ($modules as $key => $module) {
    // Look for the info file.
    $module->info = drupal_parse_info_file(dirname($module->filepath) . '/' . $module->name . '.info');

    // Skip modules that don't provide info.
    if (empty($module->info)) {
      unset($modules[$key]);
      continue;
    }

    // Merge in defaults and save.
    $modules[$key]->info = $module->info + $defaults;

    // Invoke hook_system_info_alter() to give installed modules a chance to
    // modify the data in the .info files if necessary.
    drupal_alter('system_info', $modules[$key]->info, $modules[$key]);
  }

  return $modules;
}

/**
 * Collect data about all currently available modules.
 *
 * @return
 *   Array of all available modules and their data.
 */
function system_get_module_data() {
  $modules = _system_get_module_data();
  ksort($modules);
  system_get_files_database($modules, 'module');
  system_update_files_database($modules, 'module');
  $modules = _module_build_dependencies($modules);
  return $modules;
}

/**
 * Helper function to scan and collect theme .info data and their engines.
 *
 * @return
 *   An associative array of themes information.
 */
function _system_get_theme_data() {
  $themes_info = &drupal_static(__FUNCTION__, array());

  if (empty($themes_info)) {
    // Find themes
    $themes = drupal_system_listing('/\.info$/', 'themes');
    // Find theme engines
    $engines = drupal_system_listing('/\.engine$/', 'themes/engines');

    // Set defaults for theme info.
    $defaults = array(
      'regions' => array(
        'sidebar_first' => 'Left sidebar',
        'sidebar_second' => 'Right sidebar',
        'content' => 'Content',
        'header' => 'Header',
        'footer' => 'Footer',
        'highlight' => 'Highlighted content',
        'help' => 'Help',
        'page_top' => 'Page top',
        'page_bottom' => 'Page bottom',
      ),
      'description' => '',
      'features' => array(
        'comment_user_picture',
        'comment_user_verification',
        'favicon',
        'logo',
        'name',
        'node_user_picture',
        'search',
        'slogan',
        'main_menu',
        'secondary_menu',
      ),
      'screenshot' => 'screenshot.png',
      'php' => DRUPAL_MINIMUM_PHP,
    );

    $sub_themes = array();
    // Read info files for each theme
    foreach ($themes as $key => $theme) {
      $themes[$key]->filename = $theme->filepath;
      $themes[$key]->info = drupal_parse_info_file($theme->filepath) + $defaults;

      // Invoke hook_system_info_alter() to give installed modules a chance to
      // modify the data in the .info files if necessary.
      drupal_alter('system_info', $themes[$key]->info, $themes[$key]);

      if (!empty($themes[$key]->info['base theme'])) {
        $sub_themes[] = $key;
      }
      if (empty($themes[$key]->info['engine'])) {
        $filename = dirname($themes[$key]->filepath) . '/' . $themes[$key]->name . '.theme';
        if (file_exists($filename)) {
          $themes[$key]->owner = $filename;
          $themes[$key]->prefix = $key;
        }
      }
      else {
        $engine = $themes[$key]->info['engine'];
        if (isset($engines[$engine])) {
          $themes[$key]->owner = $engines[$engine]->filepath;
          $themes[$key]->prefix = $engines[$engine]->name;
          $themes[$key]->template = TRUE;
        }
      }

      // Give the stylesheets proper path information.
      $pathed_stylesheets = array();
      if (isset($themes[$key]->info['stylesheets'])) {
        foreach ($themes[$key]->info['stylesheets'] as $media => $stylesheets) {
          foreach ($stylesheets as $stylesheet) {
            $pathed_stylesheets[$media][$stylesheet] = dirname($themes[$key]->filepath) . '/' . $stylesheet;
          }
        }
      }
      $themes[$key]->info['stylesheets'] = $pathed_stylesheets;

      // Give the scripts proper path information.
      $scripts = array();
      if (isset($themes[$key]->info['scripts'])) {
        foreach ($themes[$key]->info['scripts'] as $script) {
          $scripts[$script] = dirname($themes[$key]->filepath) . '/' . $script;
        }
      }
      $themes[$key]->info['scripts'] = $scripts;
      // Give the screenshot proper path information.
      if (!empty($themes[$key]->info['screenshot'])) {
        $themes[$key]->info['screenshot'] = dirname($themes[$key]->filepath) . '/' . $themes[$key]->info['screenshot'];
      }
    }

    // Now that we've established all our master themes, go back and fill in
    // data for subthemes.
    foreach ($sub_themes as $key) {
      $themes[$key]->base_themes = system_find_base_themes($themes, $key);
      // Don't proceed if there was a problem with the root base theme.
      if (!current($themes[$key]->base_themes)) {
        continue;
      }
      $base_key = key($themes[$key]->base_themes);
      foreach (array_keys($themes[$key]->base_themes) as $base_theme) {
        $themes[$base_theme]->sub_themes[$key] = $themes[$key]->info['name'];
      }
      // Copy the 'owner' and 'engine' over if the top level theme uses a
      // theme engine.
      if (isset($themes[$base_key]->owner)) {
        if (isset($themes[$base_key]->info['engine'])) {
          $themes[$key]->info['engine'] = $themes[$base_key]->info['engine'];
          $themes[$key]->owner = $themes[$base_key]->owner;
          $themes[$key]->prefix = $themes[$base_key]->prefix;
        }
        else {
          $themes[$key]->prefix = $key;
        }
      }
    }

    $themes_info = $themes;
  }

  return $themes_info;
}

/**
 * Collect data about all currently available themes.
 *
 * @return
 *   Array of all available themes and their data.
 */
function system_get_theme_data() {
  $themes = _system_get_theme_data();
  ksort($themes);
  system_get_files_database($themes, 'theme');
  system_update_files_database($themes, 'theme');
  return $themes;
}

/**
 * Find all the base themes for the specified theme.
 *
 * Themes can inherit templates and function implementations from earlier themes.
 *
 * @param $themes
 *   An array of available themes.
 * @param $key
 *   The name of the theme whose base we are looking for.
 * @param $used_keys
 *   A recursion parameter preventing endless loops.
 * @return
 *   Returns an array of all of the theme's ancestors; the first element's value
 *   will be NULL if an error occurred.
 */
function system_find_base_themes($themes, $key, $used_keys = array()) {
  $base_key = $themes[$key]->info['base theme'];
  // Does the base theme exist?
  if (!isset($themes[$base_key])) {
    return array($base_key => NULL);
  }

  $current_base_theme = array($base_key => $themes[$base_key]->info['name']);

  // Is the base theme itself a child of another theme?
  if (isset($themes[$base_key]->info['base theme'])) {
    // Do we already know the base themes of this theme?
    if (isset($themes[$base_key]->base_themes)) {
      return $themes[$base_key]->base_themes + $current_base_theme;
    }
    // Prevent loops.
    if (!empty($used_keys[$base_key])) {
      return array($base_key => NULL);
    }
    $used_keys[$base_key] = TRUE;
    return system_find_base_themes($themes, $base_key, $used_keys) + $current_base_theme;
  }
  // If we get here, then this is our parent theme.
  return $current_base_theme;
}

/**
 * Get a list of available regions from a specified theme.
 *
 * @param $theme_key
 *   The name of a theme.
 * @param $show
 *   Possible values: REGIONS_ALL or REGIONS_VISIBLE. Visible excludes hidden
 *   regions.
 * @return
 *   An array of regions in the form $region['name'] = 'description'.
 */
function system_region_list($theme_key, $show = REGIONS_ALL) {
  $list = &drupal_static(__FUNCTION__, array());

  if (empty($list[$theme_key][$show])) {
    $info = unserialize(db_query("SELECT info FROM {system} WHERE type = :type AND name = :name", array(':type' => 'theme', ':name' => $theme_key))->fetchField());
    // If requested, suppress hidden regions. @see block_admin_display_form().
    foreach ($info['regions'] as $name => $label) {
      if ($show == REGIONS_ALL || !isset($info['regions_hidden']) || !in_array($name, $info['regions_hidden'])) {
        $list[$theme_key][$show][$name] = $label;
      }
    }
  }
  return $list[$theme_key][$show];
}

/**
 * Implement hook_system_info_alter().
 */
function system_system_info_alter(&$info, $file) {
  // Remove page-top from the blocks UI since it is reserved for modules to
  // populate from outside the blocks system.
  $info['regions_hidden'][] = 'page_top';
  $info['regions_hidden'][] = 'page_bottom';
}

/**
 * Get the name of the default region for a given theme.
 *
 * @param $theme
 *   The name of a theme.
 * @return
 *   A string that is the region name.
 */
function system_default_region($theme) {
  $regions = array_keys(system_region_list($theme));
  return isset($regions[0]) ? $regions[0] : '';
}

function _system_settings_form_automatic_defaults($form) {
  // Get an array of all non-property keys
  $keys = element_children($form);

  foreach ($keys as $key) {
    // If the property (key) '#default_value' exists, replace it.
    if (array_key_exists('#default_value', $form[$key])) {
      $form[$key]['#default_value'] = variable_get($key, $form[$key]['#default_value']);
    }
    else {
      // Recurse through child elements
      $form[$key] = _system_settings_form_automatic_defaults($form[$key]);
    }
  }

  return $form;
}

/**
 * Add default buttons to a form and set its prefix.
 *
 * @ingroup forms
 * @see system_settings_form_submit()
 * @param $form
 *   An associative array containing the structure of the form.
 * @param $automatic_defaults
 *   Automatically load the saved values for each field from the system variables (defaults to TRUE).
 * @return
 *   The form structure.
 */
function system_settings_form($form, $automatic_defaults = TRUE) {
  $form['buttons']['submit'] = array('#type' => 'submit', '#value' => t('Save configuration') );

  if ($automatic_defaults) {
    $form = _system_settings_form_automatic_defaults($form);
  }

  if (!empty($_POST) && form_get_errors()) {
    drupal_set_message(t('The settings have not been saved because of the errors.'), 'error');
  }
  $form['#submit'][] = 'system_settings_form_submit';
  $form['#theme'] = 'system_settings_form';
  return $form;
}

/**
 * Execute the system_settings_form.
 *
 * If you want node type configure style handling of your checkboxes,
 * add an array_filter value to your form.
 */
function system_settings_form_submit($form, &$form_state) {
  // Exclude unnecessary elements.
  unset($form_state['values']['submit'], $form_state['values']['reset'], $form_state['values']['form_id'], $form_state['values']['op'], $form_state['values']['form_token'], $form_state['values']['form_build_id']);

  foreach ($form_state['values'] as $key => $value) {
    if (is_array($value) && isset($form_state['values']['array_filter'])) {
      $value = array_keys(array_filter($value));
    }
    variable_set($key, $value);
  }

  drupal_set_message(t('The configuration options have been saved.'));

  cache_clear_all();
  drupal_theme_rebuild();
}

/**
 * Helper function to sort requirements.
 */
function _system_sort_requirements($a, $b) {
  if (!isset($a['weight'])) {
    if (!isset($b['weight'])) {
      return strcmp($a['title'], $b['title']);
    }
    return -$b['weight'];
  }
  return isset($b['weight']) ? $a['weight'] - $b['weight'] : $a['weight'];
}

/**
 * Output a confirmation form
 *
 * This function returns a complete form for confirming an action. A link is
 * offered to go back to the item that is being changed in case the user changes
 * his/her mind.
 *
 * If the submit handler for this form is invoked, the user successfully
 * confirmed the action. You should never directly inspect $_POST to see if an
 * action was confirmed.
 *
 * Note - if the parameters $question, $description, $yes, or $no could contain
 * any user input (such as node titles or taxonomy terms), it is the
 * responsibility of the code calling confirm_form() to sanitize them first with
 * a function like check_plain() or filter_xss().
 *
 * @ingroup forms
 * @param $form
 *   Additional elements to inject into the form, for example hidden elements.
 * @param $question
 *   The question to ask the user (e.g. "Are you sure you want to delete the
 *   block <em>foo</em>?").
 * @param $path
 *   The page to go to if the user denies the action.
 *   Can be either a drupal path, or an array with the keys 'path', 'query', 'fragment'.
 * @param $description
 *   Additional text to display (defaults to "This action cannot be undone.").
 * @param $yes
 *   A caption for the button which confirms the action (e.g. "Delete",
 *   "Replace", ...).
 * @param $no
 *   A caption for the link which denies the action (e.g. "Cancel").
 * @param $name
 *   The internal name used to refer to the confirmation item.
 * @return
 *   The form.
 */
function confirm_form($form, $question, $path, $description = NULL, $yes = NULL, $no = NULL, $name = 'confirm') {
  $description = isset($description) ? $description : t('This action cannot be undone.');

  // Prepare cancel link
  $query = $fragment = NULL;
  if (is_array($path)) {
    $query = isset($path['query']) ? $path['query'] : NULL;
    $fragment = isset($path['fragment']) ? $path['fragment'] : NULL;
    $path = isset($path['path']) ? $path['path'] : NULL;
  }
  $cancel = l($no ? $no : t('Cancel'), $path, array('query' => $query, 'fragment' => $fragment));

  drupal_set_title($question, PASS_THROUGH);

  // Confirm form fails duplication check, as the form values rarely change -- so skip it.
  $form['#skip_duplicate_check'] = TRUE;

  $form['#attributes'] = array('class' => 'confirmation');
  $form['description'] = array('#markup' => $description);
  $form[$name] = array('#type' => 'hidden', '#value' => 1);

  $form['actions'] = array('#prefix' => '<div class="container-inline">', '#suffix' => '</div>');
  $form['actions']['submit'] = array('#type' => 'submit', '#value' => $yes ? $yes : t('Confirm'));
  $form['actions']['cancel'] = array('#markup' => $cancel);
  $form['#theme'] = 'confirm_form';
  return $form;
}

/**
 * Determine if a user is in compact mode.
 */
function system_admin_compact_mode() {
  global $user;
  return (isset($user->admin_compact_mode)) ? $user->admin_compact_mode : variable_get('admin_compact_mode', FALSE);
}

/**
 * Menu callback; Sets whether the admin menu is in compact mode or not.
 *
 * @param $mode
 *   Valid values are 'on' and 'off'.
 */
function system_admin_compact_page($mode = 'off') {
  global $user;
  user_save($user, array('admin_compact_mode' => ($mode == 'on')));
  drupal_goto(drupal_get_destination());
}

/**
 * Generate a list of tasks offered by a specified module.
 *
 * @param $module
 *   Module name.
 * @return
 *   An array of task links.
 */
function system_get_module_admin_tasks($module) {
  $items = &drupal_static(__FUNCTION__, array());

  if (empty($items)) {
    $result = db_query("
       SELECT m.load_functions, m.to_arg_functions, m.access_callback, m.access_arguments, m.page_callback, m.page_arguments, m.title, m.title_callback, m.title_arguments, m.type, ml.*
       FROM {menu_links} ml INNER JOIN {menu_router} m ON ml.router_path = m.path WHERE ml.link_path LIKE 'admin/%' AND hidden >= 0 AND module = 'system' AND m.number_parts > 2", array(), array('fetch' => PDO::FETCH_ASSOC));
    foreach ($result as $item) {
      _menu_link_translate($item);
      if ($item['access']) {
        $items[$item['router_path']] = $item;
      }
    }
  }

  $admin_access = user_access('administer permissions');
  $admin_tasks = array();
  $admin_task_count = 0;
  // Check for permissions.
  if (in_array($module, module_implements('permission')) && $admin_access) {
    $admin_tasks[-1] = l(t('Configure permissions'), 'admin/settings/permissions', array('fragment' => 'module-' . $module));
  }

  // Check for menu items that are admin links.
  if (in_array($module, module_implements('menu')) && $menu = module_invoke($module, 'menu')) {
    foreach (array_keys($menu) as $path) {
      if (isset($items[$path])) {
        $admin_tasks[$items[$path]['title'] . $admin_task_count ++] = l($items[$path]['title'], $path);
      }
    }
  }

  return $admin_tasks;
}

/**
 * Implement hook_cron().
 *
 * Remove older rows from flood and batch table. Remove old temporary files.
 */
function system_cron() {
  // Cleanup the flood.
  db_delete('flood')
    ->condition('timestamp', REQUEST_TIME - 3600, '<')
    ->execute();
  // Cleanup the batch table.
  db_delete('batch')
    ->condition('timestamp', REQUEST_TIME - 864000, '<')
    ->execute();

  // Remove temporary files that are older than DRUPAL_MAXIMUM_TEMP_FILE_AGE.
  // Use separate placeholders for the status to avoid a bug in some versions
  // of PHP. See http://drupal.org/node/352956
  $result = db_query('SELECT fid FROM {files} WHERE status & :permanent1 <> :permanent2 AND timestamp < :timestamp', array(
    ':permanent1' => FILE_STATUS_PERMANENT,
    ':permanent2' => FILE_STATUS_PERMANENT,
    ':timestamp' => REQUEST_TIME - DRUPAL_MAXIMUM_TEMP_FILE_AGE
  ));
  foreach ($result as $row) {
    if ($file = file_load($row->fid)) {
      if (!file_delete($file)) {
        watchdog('file system', 'Could not delete temporary file "%path" during garbage collection', array('%path' => $file->filepath), WATCHDOG_ERROR);
      }
    }
  }

  $core = array('cache', 'cache_filter', 'cache_page', 'cache_form', 'cache_menu');
  $cache_tables = array_merge(module_invoke_all('flush_caches'), $core);
  foreach ($cache_tables as $table) {
    cache_clear_all(NULL, $table);
  }

  // Reset expired items in the default queue implementation table. If that's
  // not used, this will simply be a no-op.
  db_update('queue')
    ->fields(array(
      'consumer_id' => 0,
      'expire' => 0,
    ))
    ->condition('expire', REQUEST_TIME, '<')
    ->execute();
}

/**
 * Implement hook_hook_info().
 */
function system_hook_info() {
  return array(
    'system' => array(
      'cron' => array(
        'run' => array(
          'runs when' => t('When cron runs'),
        ),
      ),
    ),
  );
}

/**
 * Implement hook_action_info().
 */
function system_action_info() {
  return array(
    'system_message_action' => array(
      'type' => 'system',
      'description' => t('Display a message to the user'),
      'configurable' => TRUE,
      'hooks' => array(
        'node' => array('view', 'insert', 'update', 'delete'),
        'comment' => array('view', 'insert', 'update', 'delete'),
        'user' => array('view', 'insert', 'update', 'delete', 'login'),
        'taxonomy' => array('insert', 'update', 'delete'),
      ),
    ),
    'system_send_email_action' => array(
      'description' => t('Send e-mail'),
      'type' => 'system',
      'configurable' => TRUE,
      'hooks' => array(
        'node' => array('view', 'insert', 'update', 'delete'),
        'comment' => array('view', 'insert', 'update', 'delete'),
        'user' => array('view', 'insert', 'update', 'delete', 'login'),
        'taxonomy' => array('insert', 'update', 'delete'),
        'cron' => array('run'),
      )
    ),
    'system_block_ip_action' => array(
      'description' => t('Ban IP address of current user'),
      'type' => 'user',
      'configurable' => FALSE,
      'hooks' => array(),
    ),
    'system_goto_action' => array(
      'description' => t('Redirect to URL'),
      'type' => 'system',
      'configurable' => TRUE,
      'hooks' => array(
        'node' => array('view', 'insert', 'update', 'delete'),
        'comment' => array('view', 'insert', 'update', 'delete'),
        'user' => array('view', 'insert', 'update', 'delete', 'login'),
      )
    )
  );
}

/**
 * Menu callback. Display an overview of available and configured actions.
 */
function system_actions_manage() {
  actions_synchronize();
  $actions = actions_list();
  $actions_map = actions_actions_map($actions);
  $options = array(t('Choose an advanced action'));
  $unconfigurable = array();

  foreach ($actions_map as $key => $array) {
    if ($array['configurable']) {
      $options[$key] = $array['description'] . '...';
    }
    else {
      $unconfigurable[] = $array;
    }
  }

  $row = array();
  $instances_present = db_query("SELECT aid FROM {actions} WHERE parameters <> ''")->fetchField();
  $header = array(
    array('data' => t('Action type'), 'field' => 'type'),
    array('data' => t('Description'), 'field' => 'description'),
    array('data' => $instances_present ? t('Operations') : '', 'colspan' => '2')
  );
  $query = db_select('actions')->extend('PagerDefault')->extend('TableSort');
  $result = $query
    ->fields('actions')
    ->limit(50)
    ->orderByHeader($header)
    ->execute();

  foreach ($result as $action) {
    $row[] = array(
      array('data' => $action->type),
      array('data' => $action->description),
      array('data' => $action->parameters ? l(t('configure'), "admin/settings/actions/configure/$action->aid") : ''),
      array('data' => $action->parameters ? l(t('delete'), "admin/settings/actions/delete/$action->aid") : '')
    );
  }

  if ($row) {
    $pager = theme('pager', NULL);
    if (!empty($pager)) {
      $row[] = array(array('data' => $pager, 'colspan' => '3'));
    }
    $build['system_actions_header'] = array('#markup' => '<h3>' . t('Actions available to Drupal:') . '</h3>');
    $build['system_actions_table'] = array('#markup' => theme('table', $header, $row));
  }

  if ($actions_map) {
    $build['system_actions_manage_form'] = drupal_get_form('system_actions_manage_form', $options);
  }

  return $build;
}

/**
 * Define the form for the actions overview page.
 *
 * @see system_actions_manage_form_submit()
 * @ingroup forms
 * @param $form_state
 *   An associative array containing the current state of the form; not used.
 * @param $options
 *   An array of configurable actions.
 * @return
 *   Form definition.
 */
function system_actions_manage_form($form_state, $options = array()) {
  $form['parent'] = array(
    '#type' => 'fieldset',
    '#title' => t('Make a new advanced action available'),
    '#prefix' => '<div class="container-inline">',
    '#suffix' => '</div>',
  );
  $form['parent']['action'] = array(
    '#type' => 'select',
    '#default_value' => '',
    '#options' => $options,
    '#description' => '',
  );
  $form['parent']['buttons']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Create'),
  );
  return $form;
}

/**
 * Process system_actions_manage form submissions.
 */
function system_actions_manage_form_submit($form, &$form_state) {
  if ($form_state['values']['action']) {
    $form_state['redirect'] = 'admin/settings/actions/configure/' . $form_state['values']['action'];
  }
}

/**
 * Menu callback. Create the form for configuration of a single action.
 *
 * We provide the "Description" field. The rest of the form
 * is provided by the action. We then provide the Save button.
 * Because we are combining unknown form elements with the action
 * configuration form, we use actions_ prefix on our elements.
 *
 * @see system_actions_configure_validate()
 * @see system_actions_configure_submit()
 * @param $action
 *   md5 hash of action ID or an integer. If it's an md5 hash, we
 *   are creating a new instance. If it's an integer, we're editing
 *   an existing instance.
 * @return
 *   Form definition.
 */
function system_actions_configure($form_state, $action = NULL) {
  if ($action === NULL) {
    drupal_goto('admin/settings/actions');
  }

  $actions_map = actions_actions_map(actions_list());
  $edit = array();

  // Numeric action denotes saved instance of a configurable action;
  // else we are creating a new action instance.
  if (is_numeric($action)) {
    $aid = $action;
    // Load stored parameter values from database.
    $data = db_query("SELECT * FROM {actions} WHERE aid = :aid", array(':aid' => $aid))->fetch();
    $edit['actions_description'] = $data->description;
    $edit['actions_type'] = $data->type;
    $function = $data->callback;
    $action = md5($data->callback);
    $params = unserialize($data->parameters);
    if ($params) {
      foreach ($params as $name => $val) {
        $edit[$name] = $val;
      }
    }
  }
  else {
    $function = $actions_map[$action]['callback'];
    $edit['actions_description'] = $actions_map[$action]['description'];
    $edit['actions_type'] = $actions_map[$action]['type'];
  }

  $form['actions_description'] = array(
    '#type' => 'textfield',
    '#title' => t('Description'),
    '#default_value' => $edit['actions_description'],
    '#maxlength' => '255',
    '#description' => t('A unique description for this advanced action. This description will be displayed in the interface of modules that integrate with actions, such as Trigger module.'),
    '#weight' => -10
  );
  $action_form = $function . '_form';
  $form = array_merge($form, $action_form($edit));
  $form['actions_type'] = array(
    '#type' => 'value',
    '#value' => $edit['actions_type'],
  );
  $form['actions_action'] = array(
    '#type' => 'hidden',
    '#value' => $action,
  );
  // $aid is set when configuring an existing action instance.
  if (isset($aid)) {
    $form['actions_aid'] = array(
      '#type' => 'hidden',
      '#value' => $aid,
    );
  }
  $form['actions_configured'] = array(
    '#type' => 'hidden',
    '#value' => '1',
  );
  $form['buttons']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
    '#weight' => 13
  );

  return $form;
}

/**
 * Validate system_actions_configure form submissions.
 */
function system_actions_configure_validate($form, $form_state) {
  $function = actions_function_lookup($form_state['values']['actions_action']) . '_validate';
  // Hand off validation to the action.
  if (drupal_function_exists($function)) {
    $function($form, $form_state);
  }
}

/**
 * Process system_actions_configure form submissions.
 */
function system_actions_configure_submit($form, &$form_state) {
  $function = actions_function_lookup($form_state['values']['actions_action']);
  $submit_function = $function . '_submit';

  // Action will return keyed array of values to store.
  $params = $submit_function($form, $form_state);
  $aid = isset($form_state['values']['actions_aid']) ? $form_state['values']['actions_aid'] : NULL;

  actions_save($function, $form_state['values']['actions_type'], $params, $form_state['values']['actions_description'], $aid);
  drupal_set_message(t('The action has been successfully saved.'));

  $form_state['redirect'] = 'admin/settings/actions/manage';
}

/**
 * Create the form for confirmation of deleting an action.
 *
 * @ingroup forms
 * @see system_actions_delete_form_submit()
 */
function system_actions_delete_form($form_state, $action) {

  $form['aid'] = array(
    '#type' => 'hidden',
    '#value' => $action->aid,
  );
  return confirm_form($form,
    t('Are you sure you want to delete the action %action?', array('%action' => $action->description)),
    'admin/settings/actions/manage',
    t('This cannot be undone.'),
    t('Delete'), t('Cancel')
  );
}

/**
 * Process system_actions_delete form submissions.
 *
 * Post-deletion operations for action deletion.
 */
function system_actions_delete_form_submit($form, &$form_state) {
  $aid = $form_state['values']['aid'];
  $action = actions_load($aid);
  actions_delete($aid);
  $description = check_plain($action->description);
  watchdog('user', 'Deleted action %aid (%action)', array('%aid' => $aid, '%action' => $description));
  drupal_set_message(t('Action %action was deleted', array('%action' => $description)));
  $form_state['redirect'] = 'admin/settings/actions/manage';
}

/**
 * Post-deletion operations for deleting action orphans.
 *
 * @param $orphaned
 *   An array of orphaned actions.
 */
function system_action_delete_orphans_post($orphaned) {
  foreach ($orphaned as $callback) {
    drupal_set_message(t("Deleted orphaned action (%action).", array('%action' => $callback)));
  }
}

/**
 * Remove actions that are in the database but not supported by any enabled module.
 */
function system_actions_remove_orphans() {
  actions_synchronize(TRUE);
  drupal_goto('admin/settings/actions/manage');
}

/**
 * Return a form definition so the Send email action can be configured.
 *
 * @see system_send_email_action_validate()
 * @see system_send_email_action_submit()
 * @param $context
 *   Default values (if we are editing an existing action instance).
 * @return
 *   Form definition.
 */
function system_send_email_action_form($context) {
  // Set default values for form.
  if (!isset($context['recipient'])) {
    $context['recipient'] = '';
  }
  if (!isset($context['subject'])) {
    $context['subject'] = '';
  }
  if (!isset($context['message'])) {
    $context['message'] = '';
  }

  $form['recipient'] = array(
    '#type' => 'textfield',
    '#title' => t('Recipient'),
    '#default_value' => $context['recipient'],
    '#maxlength' => '254',
    '#description' => t('The email address to which the message should be sent OR enter %author if you would like to send an e-mail to the author of the original post.', array('%author' => '%author')),
  );
  $form['subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Subject'),
    '#default_value' => $context['subject'],
    '#maxlength' => '254',
    '#description' => t('The subject of the message.'),
  );
  $form['message'] = array(
    '#type' => 'textarea',
    '#title' => t('Message'),
    '#default_value' => $context['message'],
    '#cols' => '80',
    '#rows' => '20',
    '#description' => t('The message that should be sent. You may include the following variables: %site_name, %username, %node_url, %node_type, %title, %teaser, %body, %term_name, %term_description, %term_id, %vocabulary_name, %vocabulary_description, %vocabulary_id. Not all variables will be available in all contexts.'),
  );
  return $form;
}

/**
 * Validate system_send_email_action form submissions.
 */
function system_send_email_action_validate($form, $form_state) {
  $form_values = $form_state['values'];
  // Validate the configuration form.
  if (!valid_email_address($form_values['recipient']) && $form_values['recipient'] != '%author') {
    // We want the literal %author placeholder to be emphasized in the error message.
    form_set_error('recipient', t('Please enter a valid email address or %author.', array('%author' => '%author')));
  }
}

/**
 * Process system_send_email_action form submissions.
 */
function system_send_email_action_submit($form, $form_state) {
  $form_values = $form_state['values'];
  // Process the HTML form to store configuration. The keyed array that
  // we return will be serialized to the database.
  $params = array(
    'recipient' => $form_values['recipient'],
    'subject'   => $form_values['subject'],
    'message'   => $form_values['message'],
  );
  return $params;
}

/**
 * Implement a configurable Drupal action. Sends an email.
 */
function system_send_email_action($object, $context) {
  global $user;

  switch ($context['hook']) {
    case 'node':
      // Because this is not an action of type 'node' the node
      // will not be passed as $object, but it will still be available
      // in $context.
      $node = $context['node'];
      break;
    // The comment hook provides nid, in $context.
    case 'comment':
      $comment = $context['comment'];
      $node = node_load($comment->nid);
      break;
    case 'user':
      // Because this is not an action of type 'user' the user
      // object is not passed as $object, but it will still be available
      // in $context.
      $account = $context['account'];
      if (isset($context['node'])) {
        $node = $context['node'];
      }
      elseif ($context['recipient'] == '%author') {
        // If we don't have a node, we don't have a node author.
        watchdog('error', 'Cannot use %author token in this context.');
        return;
      }
      break;
    default:
      // We are being called directly.
      $node = $object;
  }

  $recipient = $context['recipient'];

  if (isset($node)) {
    if (!isset($account)) {
      $account = user_load($node->uid);
    }
    if ($recipient == '%author') {
      $recipient = $account->mail;
    }
  }

  if (!isset($account)) {
    $account = $user;

  }
  $language = user_preferred_language($account);
  $params = array('account' => $account, 'object' => $object, 'context' => $context);
  if (isset($node)) {
    $params['node'] = $node;
  }

  if (drupal_mail('system', 'action_send_email', $recipient, $language, $params)) {
    watchdog('action', 'Sent email to %recipient', array('%recipient' => $recipient));
  }
  else {
    watchdog('error', 'Unable to send email to %recipient', array('%recipient' => $recipient));
  }
}

/**
 * Implement hook_mail().
 */
function system_mail($key, &$message, $params) {
  $account = $params['account'];
  $context = $params['context'];
  $variables = array(
    '%site_name' => variable_get('site_name', 'Drupal'),
    '%username' => $account->name,
  );
  if ($context['hook'] == 'taxonomy') {
    $object = $params['object'];
    $vocabulary = taxonomy_vocabulary_load($object->vid);
    $variables += array(
      '%term_name' => $object->name,
      '%term_description' => $object->description,
      '%term_id' => $object->tid,
      '%vocabulary_name' => $vocabulary->name,
      '%vocabulary_description' => $vocabulary->description,
      '%vocabulary_id' => $vocabulary->vid,
    );
  }

  // Node-based variable translation is only available if we have a node.
  if (isset($params['node'])) {
    $node = $params['node'];
    $variables += array(
      '%uid' => $node->uid,
      '%node_url' => url('node/' . $node->nid, array('absolute' => TRUE)),
      '%node_type' => node_type_get_name($node),
      '%title' => $node->title,
      '%teaser' => $node->teaser,
      '%body' => $node->body,
    );
  }
  $subject = strtr($context['subject'], $variables);
  $body = strtr($context['message'], $variables);
  $message['subject'] .= str_replace(array("\r", "\n"), '', $subject);
  $message['body'][] = drupal_html_to_text($body);
}

function system_message_action_form($context) {
  $form['message'] = array(
    '#type' => 'textarea',
    '#title' => t('Message'),
    '#default_value' => isset($context['message']) ? $context['message'] : '',
    '#required' => TRUE,
    '#rows' => '8',
    '#description' => t('The message to be displayed to the current user. You may include the following variables: %site_name, %username, %node_url, %node_type, %title, %teaser, %body, %term_name, %term_description, %term_id, %vocabulary_name, %vocabulary_description, %vocabulary_id. Not all variables will be available in all contexts.'),
  );
  return $form;
}

function system_message_action_submit($form, $form_state) {
  return array('message' => $form_state['values']['message']);
}

/**
 * A configurable Drupal action. Sends a message to the current user's screen.
 */
function system_message_action(&$object, $context = array()) {
  global $user;
  $variables = array(
    '%site_name' => variable_get('site_name', 'Drupal'),
    '%username' => $user->name ? $user->name : variable_get('anonymous', t('Anonymous')),
  );

  // This action can be called in any context, but if placeholders
  // are used a node object must be present to be the source
  // of substituted text.
  switch ($context['hook']) {
    case 'node':
      // Because this is not an action of type 'node' the node
      // will not be passed as $object, but it will still be available
      // in $context.
      $node = $context['node'];
      break;
    // The comment hook also provides the node, in context.
    case 'comment':
      $comment = $context['comment'];
      $node = node_load($comment->nid);
      break;
    case 'taxonomy':
      $vocabulary = taxonomy_vocabulary_load($object->vid);
      $variables = array_merge($variables, array(
        '%term_name' => $object->name,
        '%term_description' => $object->description,
        '%term_id' => $object->tid,
        '%vocabulary_name' => $vocabulary->name,
        '%vocabulary_description' => $vocabulary->description,
        '%vocabulary_id' => $vocabulary->vid,
        )
      );
      break;
    default:
      // We are being called directly.
      $node = $object;
  }

  if (isset($node) && is_object($node)) {
    $variables = array_merge($variables, array(
      '%uid' => $node->uid,
      '%node_url' => url('node/' . $node->nid, array('absolute' => TRUE)),
      '%node_type' => check_plain(node_type_get_name($node)),
      '%title' => filter_xss($node->title),
      '%teaser' => filter_xss($node->teaser),
      '%body' => filter_xss($node->body),
      )
    );
  }
  $context['message'] = strtr($context['message'], $variables);
  drupal_set_message($context['message']);
}

/**
 * Implement a configurable Drupal action. Redirect user to a URL.
 */
function system_goto_action_form($context) {
  $form['url'] = array(
    '#type' => 'textfield',
    '#title' => t('URL'),
    '#description' => t('The URL to which the user should be redirected. This can be an internal URL like node/1234 or an external URL like http://drupal.org.'),
    '#default_value' => isset($context['url']) ? $context['url'] : '',
    '#required' => TRUE,
  );
  return $form;
}

function system_goto_action_submit($form, $form_state) {
  return array(
    'url' => $form_state['values']['url']
  );
}

function system_goto_action($object, $context) {
  drupal_goto($context['url']);
}

/**
 * Implement a Drupal action.
 * Blocks the user's IP address.
 */
function system_block_ip_action() {
  $ip = ip_address();
  db_insert('blocked_ips')
    ->fields(array('ip' => $ip))
    ->execute();
  watchdog('action', 'Banned IP address %ip', array('%ip' => $ip));
}

/**
 * Generate an array of time zones and their local time&date.
 *
 * @param $blank
 *   If evaluates true, prepend an empty time zone option to the array.
 */
function system_time_zones($blank = NULL) {
  $zonelist = timezone_identifiers_list();
  $zones = $blank ? array('' => t('- None selected -')) : array();
  foreach ($zonelist as $zone) {
    // Because many time zones exist in PHP only for backward compatibility
    // reasons and should not be used, the list is filtered by a regular
    // expression.
    if (preg_match('!^((Africa|America|Antarctica|Arctic|Asia|Atlantic|Australia|Europe|Indian|Pacific)/|UTC$)!', $zone)) {
      $zones[$zone] = t('@zone: @date', array('@zone' => t(str_replace('_', ' ', $zone)), '@date' => format_date(REQUEST_TIME, 'custom', variable_get('date_format_long', 'l, F j, Y - H:i') . ' O', $zone)));
    }
  }
  // Sort the translated time zones alphabetically.
  asort($zones);
  return $zones;
}

/**
 * Checks whether the server is capable of issuing HTTP requests.
 *
 * The function sets the drupal_http_request_fail system variable to TRUE if
 * drupal_http_request() does not work and then the system status report page
 * will contain an error.
 *
 * @return
 *  TRUE if this installation can issue HTTP requests.
 */
function system_check_http_request() {
  // Try to get the content of the front page via drupal_http_request().
  $result = drupal_http_request(url('', array('absolute' => TRUE)));
  // We only care that we get a http response - this means that Drupal
  // can make a http request.
  $works = isset($result->code) && ($result->code >= 100) && ($result->code < 600);
  variable_set('drupal_http_request_fails', !$works);
  return $works;
}

/**
 * Menu callback; Retrieve a JSON object containing a suggested time zone name.
 */
function system_timezone($abbreviation = '', $offset = -1, $is_daylight_saving_time = NULL) {
  // An abbreviation of "0" passed in the callback arguments should be
  // interpreted as the empty string.
  $abbreviation = $abbreviation ? $abbreviation : '';
  $timezone = timezone_name_from_abbr($abbreviation, intval($offset), $is_daylight_saving_time);
  drupal_json($timezone);
}

/**
 * Format the Powered by Drupal text.
 *
 * @ingroup themeable
 */
function theme_system_powered_by($image_path) {
  $image = theme('image', $image_path, t('Powered by Drupal, an open source content management system'), t('Powered by Drupal, an open source content management system'));
  return l($image, 'http://drupal.org', array('html' => TRUE, 'absolute' => TRUE, 'external' => TRUE));
}

/**
 * Display the link to show or hide inline help descriptions.
 *
 * @ingroup themeable
 */
function theme_system_compact_link() {
  $output = '<div class="compact-link">';
  if (system_admin_compact_mode()) {
    $output .= l(t('Show descriptions'), 'admin/compact/off', array('attributes' => array('title' => t('Expand layout to include descriptions.')), 'query' => drupal_get_destination()));
  }
  else {
    $output .= l(t('Hide descriptions'), 'admin/compact/on', array('attributes' => array('title' => t('Compress layout by hiding descriptions.')), 'query' => drupal_get_destination()));
  }
  $output .= '</div>';

  return $output;
}


/**
 * Send Drupal and the major version number in the META GENERATOR HTML.
 *
 * @ingroup themeable
 */
function theme_meta_generator_html($version = VERSION) {
  drupal_add_html_head('<meta name="Generator" content="Drupal ' . $version . ' (http://drupal.org)" />');
}

/**
 * Send Drupal and the major version number in the HTTP headers.
 *
 * @ingroup themeable
 */
function theme_meta_generator_header($version = VERSION) {
  drupal_set_header('X-Generator', 'Drupal ' . $version . ' (http://drupal.org)');
}

/**
 * Implement hook_image_toolkits().
 */
function system_image_toolkits() {
  return array(
    'gd' => array(
      'title' => t('GD2 image manipulation toolkit'),
      'available' => drupal_function_exists('image_gd_check_settings') && image_gd_check_settings(),
    ),
  );
}

/**
 * Attempts to get a file using drupal_http_request and to store it locally.
 *
 * @param $url
 *   The URL of the file to grab.
 *
 * @param $destination
 *   Where the file should be saved, if a directory is provided, file is saved
 *   in that directory with its original name.  If a filename is provided,
 *   remote fileis stored to that location.  NOTE: Relative to drupal "files" directory"
 *
 * @param $overwrite boolean
 *   Defaults to TRUE, will overwrite existing files of the same name.
 *
 * @return
 *   On success the address the files was saved to, FALSE on failure.
 */
function system_retrieve_file($url, $destination = NULL, $overwrite = TRUE) {
  if (!$destination) {
    $destination = file_directory_temp();
  }
  $parsed_url = parse_url($url);
  $local = is_dir(file_directory_path() . '/' . $destination) ? $destination . '/' . basename($parsed_url['path']) : $destination;
  
  if (!$overwrite && file_exists($local)) {
    drupal_set_message(t('@remote could not be saved. @local already exists', array('@remote' => $url, '@local' => $local)), 'error');
    return FALSE;
  }
  
  $result = drupal_http_request($url);
  if ($result->code != 200 || !file_save_data($result->data, $local)) {
    drupal_set_message(t('@remote could not be saved.', array('@remote' => $url)), 'error');
    return FALSE;
  }
  
  return $local;
}
