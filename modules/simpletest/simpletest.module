<?php
// $Id: simpletest.module,v 1.41 2009/05/01 11:01:53 dries Exp $

/**
 * @file
 * Provides testing functionality.
 */

/**
 * Implementation of hook_help().
 */
function simpletest_help($path, $arg) {
  switch ($path) {
    case 'admin/help#simpletest':
      $output  = '<p>' . t('The SimpleTest module is a framework for running automated unit tests in Drupal. It can be used to verify a working state of Drupal before and after any code changes, or as a means for developers to write and execute tests for their modules.') .'</p>';
      $output .= '<p>' . t('Visit <a href="@admin-simpletest">Administer >> Site building >> SimpleTest</a> to display a list of available tests. For comprehensive testing, select <em>all</em> tests, or individually select tests for more targeted testing. Note that it might take several minutes for all tests to complete.)', array('@admin-simpletest' => url('admin/development/testing'))) .'</p>';
      $output .= '<p>' . t('After the tests have run, a message will be displayed next to each test group indicating whether tests within it passed, failed, or had exceptions. A pass means that a test returned the expected results, while fail means that it did not. An exception normally indicates an error outside of the test, such as a PHP warning or notice. If there were fails or exceptions, the results are expanded, and the tests that had issues will be indicated in red or pink rows. Use these results to refine your code and tests until all tests return a pass.') .'</p>';
      $output .= '<p>' . t('For more information on creating and modifying your own tests, see the <a href="@simpletest-api">SimpleTest API Documentation</a> in the Drupal handbook.', array('@simpletest-api' => 'http://drupal.org/simpletest')) .'</p>';
      $output .= '<p>' . t('For more information, see the online handbook entry for <a href="@simpletest">SimpleTest module</a>.', array('@simpletest' => 'http://drupal.org/handbook/modules/simpletest')) .'</p>';
      return $output;
  }
}

/**
 * Implementation of hook_menu().
 */
function simpletest_menu() {
  $items['admin/development'] = array(
    'title' => 'Development',
    'description' => 'Development tools.',
    'position' => 'right',
    'weight' => -7,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
  );
  $items['admin/development/testing'] = array(
    'title' => 'Testing',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('simpletest_test_form'),
    'description' => 'Run tests against Drupal core and your active modules. These tests help assure that your site code is working as designed.',
    'access arguments' => array('administer unit tests'),
  );
  $items['admin/development/testing/results/%'] = array(
    'title' => 'Test result',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('simpletest_result_form', 4),
    'description' => 'View result of tests.',
    'access arguments' => array('administer unit tests'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implementation of hook_perm().
 */
function simpletest_perm() {
  return array(
    'administer unit tests' => array(
      'title' => t('Administer unit tests'),
      'description' => t('Manage and run automated testing. %warning', array('%warning' => t('Warning: Give to trusted roles only; this permission has security implications.'))),
    ),
  );
}

/**
 * Implementation of hook_theme().
 */
function simpletest_theme() {
  return array(
    'simpletest_test_table' => array(
      'arguments' => array('table' => NULL),
      'file' => 'simpletest.pages.inc',
    ),
    'simpletest_result_summary' => array(
      'arguments' => array('form' => NULL),
      'file' => 'simpletest.pages.inc',
    ),
  );
}

/**
 * Implementation of hook_js_alter().
 */
function simpletest_js_alter(&$javascript) {
  // Since SimpleTest is a special use case for the table select, stick the
  // SimpleTest JavaScript above the table select.
  $simpletest = drupal_get_path('module', 'simpletest') . '/simpletest.js';
  if (array_key_exists($simpletest, $javascript) && array_key_exists('misc/tableselect.js', $javascript)) {
    $javascript[$simpletest]['weight'] = $javascript['misc/tableselect.js']['weight'] - 1;
  }
}

function _simpletest_format_summary_line($summary) {
  return t('@pass, @fail, and @exception', array(
    '@pass' => format_plural(isset($summary['#pass']) ? $summary['#pass'] : 0, '1 pass', '@count passes'),
    '@fail' => format_plural(isset($summary['#fail']) ? $summary['#fail'] : 0, '1 fail', '@count fails'),
    '@exception' => format_plural(isset($summary['#exception']) ? $summary['#exception'] : 0, '1 exception', '@count exceptions'),
  ));
}

/**
 * Actually runs tests.
 *
 * @param $test_list
 *   List of tests to run.
 * @param $reporter
 *   Which reporter to use. Allowed values are: text, xml, html and drupal,
 *   drupal being the default.
 */
function simpletest_run_tests($test_list, $reporter = 'drupal') {
  cache_clear_all();
  $test_id = db_insert('simpletest_test_id')->useDefaults(array('test_id'))->execute();

  // Get the info for the first test being run.
  $first_test = array_shift($test_list);
  $first_instance = new $first_test();
  array_unshift($test_list, $first_test);
  $info = $first_instance->getInfo();

  $batch = array(
    'title' => t('Running SimpleTests'),
    'operations' => array(
      array('_simpletest_batch_operation', array($test_list, $test_id)),
    ),
    'finished' => '_simpletest_batch_finished',
    'progress_message' => '',
    'css' => array(drupal_get_path('module', 'simpletest') . '/simpletest.css'),
    'init_message' => t('Processing test @num of @max - %test.', array('%test' => $info['name'], '@num' => '1', '@max' => count($test_list))),
  );
  batch_set($batch);
  // Normally, the forms portion of the batch API takes care of calling
  // batch_process(), but in the process it saves the whole $form into the
  // database (which is huge for the test selection form).
  // By calling batch_process() directly, we skip that behavior and ensure
  // that we don't exceed the size of data that can be sent to the database
  // (max_allowed_packet on MySQL).
  batch_process('admin/development/testing/results/' . $test_id);
}

/**
 * Batch operation callback.
 */
function _simpletest_batch_operation($test_list_init, $test_id, &$context) {
  // Ensure that all classes are loaded before we unserialize some instances.
  simpletest_get_all_tests();

  // Get working values.
  if (!isset($context['sandbox']['max'])) {
    // First iteration: initialize working values.
    $test_list = $test_list_init;
    $context['sandbox']['max'] = count($test_list);
    $test_results = array('#pass' => 0, '#fail' => 0, '#exception' => 0);
  }
  else {
    // Nth iteration: get the current values where we last stored them.
    $test_list = $context['sandbox']['tests'];
    $test_results = $context['sandbox']['test_results'];
  }
  $max = $context['sandbox']['max'];

  // Perform the next test.
  $test_class = array_shift($test_list);
  $test = new $test_class($test_id);
  $test->run();
  $size = count($test_list);
  $info = $test->getInfo();

  // Gather results and compose the report.
  $test_results[$test_class] = $test->results;
  foreach ($test_results[$test_class] as $key => $value) {
    $test_results[$key] += $value;
  }
  $test_results[$test_class]['#name'] = $info['name'];
  $items = array();
  foreach (element_children($test_results) as $class) {
    array_unshift($items, '<div class="simpletest-' . ($test_results[$class]['#fail'] + $test_results[$class]['#exception'] ? 'fail' : 'pass') . '">' . t('@name: @summary', array('@name' => $test_results[$class]['#name'], '@summary' => _simpletest_format_summary_line($test_results[$class]))) . '</div>');
  }
  $context['message'] = t('Processed test @num of @max - %test.', array('%test' => $info['name'], '@num' => $max - $size, '@max' => $max));
  $context['message'] .= '<div class="simpletest-' . ($test_results['#fail'] + $test_results['#exception'] ? 'fail' : 'pass') . '">Overall results: ' . _simpletest_format_summary_line($test_results) . '</div>';
  $context['message'] .= theme('item_list', $items);

  // Save working values for the next iteration.
  $context['sandbox']['tests'] = $test_list;
  $context['sandbox']['test_results'] = $test_results;
  // The test_id is the only thing we need to save for the report page.
  $context['results']['test_id'] = $test_id;

  // Multistep processing: report progress.
  $context['finished'] = 1 - $size / $max;
}

function _simpletest_batch_finished($success, $results, $operations, $elapsed) {
  if ($success) {
    drupal_set_message(t('The tests finished in @elapsed.', array('@elapsed' => $elapsed)));
  }
  else {
    drupal_set_message(t('The tests did not successfully finish.'), 'error');
  }
}

/**
 * Get a list of all of the tests.
 *
 * @return
 *   An array of tests, with the class name as the keys and the instantiated
 *   versions of the classes as the values.
 */
function simpletest_get_all_tests() {
  static $formatted_classes;
  if (!isset($formatted_classes)) {
    require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'simpletest') . '/drupal_web_test_case.php';
    $files = array();
    foreach (array_keys(module_rebuild_cache()) as $module) {
      $module_path = drupal_get_path('module', $module);
      $test = $module_path . "/$module.test";
      if (file_exists($test)) {
        $files[] = $test;
      }

      $tests_directory = $module_path . '/tests';
      if (is_dir($tests_directory)) {
        foreach (file_scan_directory($tests_directory, '/\.test$/') as $file) {
          $files[] = $file->filepath;
        }
      }
    }

    $existing_classes = get_declared_classes();
    foreach ($files as $file) {
      include_once DRUPAL_ROOT . '/' . $file;
    }
    $classes = array_values(array_diff(get_declared_classes(), $existing_classes));
    foreach ($classes as $key => $class) {
      if (!method_exists($class, 'getInfo')) {
        unset($classes[$key]);
      }
    }
  }
  if (count($classes) == 0) {
    drupal_set_message('No test cases found.', 'error');
    return FALSE;
  }
  return $classes;
}

/**
 * Categorize the tests into groups.
 *
 * @param $tests
 *   A list of tests from simpletest_get_all_tests.
 * @see simpletest_get_all_tests.
 */
function simpletest_categorize_tests($tests) {
  $groups = array();
  foreach ($tests as $test) {
    $info = call_user_func(array($test, 'getInfo'));
    $groups[$info['group']][$test] = $info;
  }
  uksort($groups, 'strnatcasecmp');
  return $groups;
}

/**
 * Remove all temporary database tables and directories.
 */
function simpletest_clean_environment() {
  simpletest_clean_database();
  simpletest_clean_temporary_directories();
  $count = simpletest_clean_results_table();
  drupal_set_message(t('Removed @count test results.', array('@count' => $count)));
}

/**
 * Removed prefixed tables from the database that are left over from crashed tests.
 */
function simpletest_clean_database() {
  $tables = db_find_tables(Database::getConnection()->prefixTables('{simpletest}') . '%');
  $schema = drupal_get_schema_unprocessed('simpletest');
  $ret = array();
  foreach (array_diff_key($tables, $schema) as $table) {
    // Strip the prefix and skip tables without digits following "simpletest",
    // e.g. {simpletest_test_id}.
    if (preg_match('/simpletest\d+.*/', $table, $matches)) {
      db_drop_table($ret, $matches[0]);
    }
  }

  if (count($ret) > 0) {
    drupal_set_message(t('Removed @count left over tables.', array('@count' => count($ret))));
  }
  else {
    drupal_set_message(t('No left over tables to remove.'));
  }
}

/**
 * Find all left over temporary directories and remove them.
 */
function simpletest_clean_temporary_directories() {
  $files = scandir(file_directory_path());
  $count = 0;
  foreach ($files as $file) {
    $path = file_directory_path() . '/' . $file;
    if (is_dir($path) && preg_match('/^simpletest\d+/', $file)) {
      file_unmanaged_delete_recursive($path);
      $count++;
    }
  }

  if ($count > 0) {
    drupal_set_message(t('Removed @count temporary directories.', array('@count' => $count)));
  }
  else {
    drupal_set_message(t('No temporary directories to remove.'));
  }
}

/**
 * Clear the test result tables.
 *
 * @param $test_id
 *   Test ID to remove results for, or NULL to remove all results.
 * @return
 *   The number of results removed or FALSE.
 */
function simpletest_clean_results_table($test_id = NULL) {
  if (variable_get('simpletest_clear_results', TRUE)) {
    if ($test_id) {
      $count = db_result(db_query('SELECT COUNT(test_id) FROM {simpletest_test_id} WHERE test_id = :test_id', array(':test_id' => $test_id)));

      db_delete("simpletest")
        ->condition('test_id', $test_id)
        ->execute();
      db_delete("simpletest_test_id")
        ->condition('test_id', $test_id)
        ->execute();
    }
    else {
      $count = db_result(db_query('SELECT COUNT(test_id) FROM {simpletest_test_id}'));

      // Clear test results.
      db_delete("simpletest")->execute();
      db_delete("simpletest_test_id")->execute();
    }

    return $count;
  }
  return FALSE;
}
