<?php
// $Id: node_test.module,v 1.4 2009/05/27 18:33:58 dries Exp $

/**
 * @file
 * Dummy module implementing node related hooks to test API interaction with
 * the Node module.
 */

/**
 * Implement hook_node_view().
 */
function node_test_node_view($node, $teaser) {
  if ($node->build_mode == NODE_BUILD_RSS) {
    // Add RSS elements and namespaces when building the RSS feed.
    $node->rss_elements[] = array(
      'key' => 'testElement',
      'value' => t('Value of testElement RSS element for node !nid.', array('!nid' => $node->nid)),
    );
    $node->rss_namespaces['xmlns:drupaltest'] = 'http://example.com/test-namespace';

    // Add content that should be displayed only in the RSS feed.
    $node->content['extra_feed_content'] = array(
      '#markup' => '<p>' . t('Extra data that should appear only in the RSS feed for node !nid.', array('!nid' => $node->nid)) . '</p>',
      '#weight' => 10,
    );
  }

  if ($node->build_mode != NODE_BUILD_RSS) {
    // Add content that should NOT be displayed in the RSS feed.
    $node->content['extra_non_feed_content'] = array(
      '#markup' => '<p>' . t('Extra data that should appear everywhere except the RSS feed for node !nid.', array('!nid' => $node->nid)) . '</p>',
    );
  }
}

/**
 * Implement hook_node_grants().
 */
function node_test_node_grants($account, $op) {
  // Give everyone full grants so we don't break other node tests.
  // Our node access tests asserts three realms of access.
  // @see testGrantAlter()
  return array(
    'test_article_realm' => array(1),
    'test_page_realm' => array(1),
    'test_alter_realm' => array(2),
  );
}

/**
 * Implement hook_node_access_records().
 */
function node_test_node_access_records($node) {
  $grants = array();
  if ($node->type == 'article') {
    // Create grant in arbitrary article_realm for article nodes.
    $grants[] = array(
      'realm' => 'test_article_realm',
      'gid' => 1,
      'grant_view' => 1,
      'grant_update' => 0,
      'grant_delete' => 0,
      'priority' => 0,
    );
  }
  elseif ($node->type == 'page') {
    // Create grant in arbitrary page_realm for page nodes.
    $grants[] = array(
      'realm' => 'test_page_realm',
      'gid' => 1,
      'grant_view' => 1,
      'grant_update' => 0,
      'grant_delete' => 0,
      'priority' => 0,
    );
  }
  return $grants;
}

/**
 * Implement hook_node_access_records_alter().
 */
function node_test_node_access_records_alter(&$grants, $node) {
  if (!empty($grants)) {
    foreach ($grants as $key => $grant) {
      // Alter grant from test_page_realm to test_alter_realm and modify the gid.
      if ($grant['realm'] == 'test_page_realm' && $node->promote) {
        $grants[$key]['realm'] = 'test_alter_realm';
        $grants[$key]['gid'] = 2;
      }
    }
  }
}

/**
 * Implement hook_node_grants_alter().
 */
function node_test_node_grants_alter(&$grants, $account, $op) {
  // Return an empty array of grants to prove that we can alter by reference.
  $grants = array();
}
